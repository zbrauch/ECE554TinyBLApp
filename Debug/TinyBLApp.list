
TinyBLApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002590  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002798  08002798  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a0  080027a0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080027a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000018  080027c0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080027c0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000917a  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018f5  00000000  00000000  00029205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000639  00000000  00000000  0002b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002055c  00000000  00000000  0002b899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a02c  00000000  00000000  0004bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c11  00000000  00000000  00055e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c7c  00000000  00000000  0011aa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800273c 	.word	0x0800273c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	0800273c 	.word	0x0800273c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <BSP_LED_Init>:
	LED_BLUE = LED2,
	LED3 = 2,
	LED_RED = LED3
}Led_TypeDef;
void BSP_LED_Init(Led_TypeDef Led)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10e      	bne.n	800052e <BSP_LED_Init+0x2e>
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <BSP_LED_Init+0x94>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <BSP_LED_Init+0x94>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <BSP_LED_Init+0x94>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	e00d      	b.n	800054a <BSP_LED_Init+0x4a>
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <BSP_LED_Init+0x94>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <BSP_LED_Init+0x94>)
 8000538:	f043 0302 	orr.w	r3, r3, #2
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <BSP_LED_Init+0x94>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <BSP_LED_Init+0x98>)
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	2301      	movs	r3, #1
 8000556:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <BSP_LED_Init+0x9c>)
 8000564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000568:	f107 0214 	add.w	r2, r7, #20
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fd34 	bl	8000fdc <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <BSP_LED_Init+0x9c>)
 8000578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4a06      	ldr	r2, [pc, #24]	; (8000598 <BSP_LED_Init+0x98>)
 8000580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000584:	2200      	movs	r2, #0
 8000586:	4619      	mov	r1, r3
 8000588:	f000 fed4 	bl	8001334 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	3728      	adds	r7, #40	; 0x28
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40023800 	.word	0x40023800
 8000598:	08002754 	.word	0x08002754
 800059c:	20000000 	.word	0x20000000

080005a0 <BSP_LED_On>:
void BSP_LED_On(Led_TypeDef Led)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <BSP_LED_On+0x2c>)
 80005ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <BSP_LED_On+0x30>)
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	f000 feb9 	bl	8001334 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	08002754 	.word	0x08002754

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d8:	f000 fba8 	bl	8000d2c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005dc:	f000 f832 	bl	8000644 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	BSP_LED_Init(LED1);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff8d 	bl	8000500 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff ff8a 	bl	8000500 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 80005ec:	2002      	movs	r0, #2
 80005ee:	f7ff ff87 	bl	8000500 <BSP_LED_Init>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	//UART init
	UartHandle.Instance        = USART3;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <main+0x68>)
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <main+0x6c>)
 80005f6:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x68>)
 80005fa:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80005fe:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <main+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <main+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <main+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x68>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0x68>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x68>)
 8000626:	f001 fc51 	bl	8001ecc <HAL_UART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <main+0x5e>
	{
		//Initialization Error
		for(;;);
 8000630:	e7fe      	b.n	8000630 <main+0x5c>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	BSP_LED_On(LED3);
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ffb4 	bl	80005a0 <BSP_LED_On>
	while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x64>
 800063a:	bf00      	nop
 800063c:	20000034 	.word	0x20000034
 8000640:	40004800 	.word	0x40004800

08000644 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	; 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f846 	bl	80026e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <SystemClock_Config+0xdc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a2b      	ldr	r2, [pc, #172]	; (8000720 <SystemClock_Config+0xdc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <SystemClock_Config+0xe0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a25      	ldr	r2, [pc, #148]	; (8000724 <SystemClock_Config+0xe0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <SystemClock_Config+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80006b8:	23b4      	movs	r3, #180	; 0xb4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f95f 	bl	8001990 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
	{
		Error_Handler();
 80006d8:	f000 f826 	bl	8000728 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006dc:	f000 fe44 	bl	8001368 <HAL_PWREx_EnableOverDrive>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80006e6:	f000 f81f 	bl	8000728 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2105      	movs	r1, #5
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fe7d 	bl	8001408 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000714:	f000 f808 	bl	8000728 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_UART_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;
		//##-1- Enable peripherals and GPIO Clocks #################################
		// Enable GPIO TX/RX clock
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 8000746:	f043 0308 	orr.w	r3, r3, #8
 800074a:	6313      	str	r3, [r2, #48]	; 0x30
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]

		// Enable USARTx clock
		__HAL_RCC_USART3_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 800077e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]

		//##-2- Configure peripheral GPIO ##########################################
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8000790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000794:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007a2:	2307      	movs	r3, #7
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 80007ae:	f000 fc15 	bl	8000fdc <HAL_GPIO_Init>

		// UART RX GPIO pin configuration
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007b8:	2307      	movs	r3, #7
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 80007c4:	f000 fc0a 	bl	8000fdc <HAL_GPIO_Init>


}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000874:	f000 faac 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <BLQueueInit>:
	uint8_t buf[BL_QUEUE_LEN];
	uint8_t len;
} BLQueue;

void BLQueueInit(BLQueue *q) {
	q->start = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	8003      	strh	r3, [r0, #0]
	q->next = 0;
	q->len = 0;
 80008a4:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <BLQueueFixBounds>:

void BLQueueFixBounds(BLQueue *q) {
	if(q->start >= BL_QUEUE_LEN)
 80008ac:	7803      	ldrb	r3, [r0, #0]
 80008ae:	2b63      	cmp	r3, #99	; 0x63
		q->start -= BL_QUEUE_LEN;
 80008b0:	bf84      	itt	hi
 80008b2:	3b64      	subhi	r3, #100	; 0x64
 80008b4:	7003      	strbhi	r3, [r0, #0]
	if(q->next >= BL_QUEUE_LEN)
 80008b6:	7843      	ldrb	r3, [r0, #1]
 80008b8:	2b63      	cmp	r3, #99	; 0x63
		q->next -= BL_QUEUE_LEN;
 80008ba:	bf84      	itt	hi
 80008bc:	3b64      	subhi	r3, #100	; 0x64
 80008be:	7043      	strbhi	r3, [r0, #1]
	if(q->len > BL_QUEUE_LEN)
 80008c0:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80008c4:	2b64      	cmp	r3, #100	; 0x64
		q->len = BL_QUEUE_LEN;
 80008c6:	bf84      	itt	hi
 80008c8:	2364      	movhi	r3, #100	; 0x64
 80008ca:	f880 3066 	strbhi.w	r3, [r0, #102]	; 0x66
}
 80008ce:	4770      	bx	lr

080008d0 <BLQueueAdd>:

void BLQueueAdd(BLQueue *q, uint8_t element) {
	q->buf[q->next] = element;
 80008d0:	7843      	ldrb	r3, [r0, #1]
 80008d2:	eb00 0c03 	add.w	ip, r0, r3
	q->next++;
 80008d6:	1c5a      	adds	r2, r3, #1
	q->buf[q->next] = element;
 80008d8:	f88c 1002 	strb.w	r1, [ip, #2]
	q->len++;
 80008dc:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
	q->next++;
 80008e0:	7042      	strb	r2, [r0, #1]
	q->len++;
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2db      	uxtb	r3, r3

	if(q->len == BL_QUEUE_LEN)
 80008e6:	2b64      	cmp	r3, #100	; 0x64
	q->len++;
 80008e8:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
	if(q->len == BL_QUEUE_LEN)
 80008ec:	d102      	bne.n	80008f4 <BLQueueAdd+0x24>
		q->start++;
 80008ee:	7803      	ldrb	r3, [r0, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	7003      	strb	r3, [r0, #0]

	BLQueueFixBounds(q);
 80008f4:	f7ff bfda 	b.w	80008ac <BLQueueFixBounds>

080008f8 <BLQueueGetIdx>:
	for(uint8_t i = 0; i < len; i++)
		BLQueueAdd(q, inbuf[i]);
}

uint8_t BLQueueGetIdx(BLQueue *q, uint8_t idx) {
	uint8_t retIdx = idx + q->start;
 80008f8:	7803      	ldrb	r3, [r0, #0]
 80008fa:	4419      	add	r1, r3
 80008fc:	b2c9      	uxtb	r1, r1
	while(retIdx > BL_QUEUE_LEN)
 80008fe:	2964      	cmp	r1, #100	; 0x64
 8000900:	d907      	bls.n	8000912 <BLQueueGetIdx+0x1a>
		retIdx -= BL_QUEUE_LEN;
 8000902:	f1a1 0364 	sub.w	r3, r1, #100	; 0x64
 8000906:	b2db      	uxtb	r3, r3
	while(retIdx > BL_QUEUE_LEN)
 8000908:	2b64      	cmp	r3, #100	; 0x64
		retIdx -= BL_QUEUE_LEN;
 800090a:	bf86      	itte	hi
 800090c:	3138      	addhi	r1, #56	; 0x38
 800090e:	b2c9      	uxtbhi	r1, r1
	while(retIdx > BL_QUEUE_LEN)
 8000910:	4619      	movls	r1, r3

	return q->buf[retIdx];
 8000912:	4408      	add	r0, r1
}
 8000914:	7880      	ldrb	r0, [r0, #2]
 8000916:	4770      	bx	lr

08000918 <BLQueueExtractInit>:

//pulls a 10 byte command out of the buffer if one exists
	//Commands start with sopChar and end with 'E'
	//Also moves the start of the buffer to the end of the extracted command
	//returns 1 if command extracted, 0 if none found
uint8_t BLQueueExtractInit(BLQueue *q, uint8_t *outBuf, uint8_t sopChar) {
 8000918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for(uint8_t i = 0; i < q->len - 9; i++) {
 800091c:	f890 8066 	ldrb.w	r8, [r0, #102]	; 0x66
 8000920:	f1a8 0709 	sub.w	r7, r8, #9
 8000924:	2f00      	cmp	r7, #0
 8000926:	dd6b      	ble.n	8000a00 <BLQueueExtractInit+0xe8>
 8000928:	2400      	movs	r4, #0
 800092a:	4606      	mov	r6, r0
 800092c:	4689      	mov	r9, r1
 800092e:	4625      	mov	r5, r4
 8000930:	e004      	b.n	800093c <BLQueueExtractInit+0x24>
 8000932:	3401      	adds	r4, #1
 8000934:	b2e4      	uxtb	r4, r4
 8000936:	42bc      	cmp	r4, r7
 8000938:	4625      	mov	r5, r4
 800093a:	da61      	bge.n	8000a00 <BLQueueExtractInit+0xe8>
		if(BLQueueGetIdx(q, i) == sopChar) {
 800093c:	4621      	mov	r1, r4
 800093e:	4630      	mov	r0, r6
 8000940:	f7ff ffda 	bl	80008f8 <BLQueueGetIdx>
 8000944:	4290      	cmp	r0, r2
 8000946:	d1f4      	bne.n	8000932 <BLQueueExtractInit+0x1a>
			if(i+9 < q->len && BLQueueGetIdx(q, i+9) == 'E') {
 8000948:	3509      	adds	r5, #9
 800094a:	4545      	cmp	r5, r8
 800094c:	daf1      	bge.n	8000932 <BLQueueExtractInit+0x1a>
 800094e:	f104 0509 	add.w	r5, r4, #9
 8000952:	b2ed      	uxtb	r5, r5
 8000954:	4629      	mov	r1, r5
 8000956:	4630      	mov	r0, r6
 8000958:	f7ff ffce 	bl	80008f8 <BLQueueGetIdx>
 800095c:	2845      	cmp	r0, #69	; 0x45
 800095e:	d1e8      	bne.n	8000932 <BLQueueExtractInit+0x1a>
				for(uint8_t j = 0; j < 10; j++)
					outBuf[j] = BLQueueGetIdx(q, i+j);
 8000960:	1c61      	adds	r1, r4, #1
 8000962:	f889 2000 	strb.w	r2, [r9]
 8000966:	b2c9      	uxtb	r1, r1
 8000968:	4630      	mov	r0, r6
 800096a:	f7ff ffc5 	bl	80008f8 <BLQueueGetIdx>
 800096e:	1ca1      	adds	r1, r4, #2
 8000970:	f889 0001 	strb.w	r0, [r9, #1]
 8000974:	b2c9      	uxtb	r1, r1
 8000976:	4630      	mov	r0, r6
 8000978:	f7ff ffbe 	bl	80008f8 <BLQueueGetIdx>
 800097c:	1ce1      	adds	r1, r4, #3
 800097e:	f889 0002 	strb.w	r0, [r9, #2]
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	4630      	mov	r0, r6
 8000986:	f7ff ffb7 	bl	80008f8 <BLQueueGetIdx>
 800098a:	1d21      	adds	r1, r4, #4
 800098c:	f889 0003 	strb.w	r0, [r9, #3]
 8000990:	b2c9      	uxtb	r1, r1
 8000992:	4630      	mov	r0, r6
 8000994:	f7ff ffb0 	bl	80008f8 <BLQueueGetIdx>
 8000998:	1d61      	adds	r1, r4, #5
 800099a:	f889 0004 	strb.w	r0, [r9, #4]
 800099e:	b2c9      	uxtb	r1, r1
 80009a0:	4630      	mov	r0, r6
 80009a2:	f7ff ffa9 	bl	80008f8 <BLQueueGetIdx>
 80009a6:	1da1      	adds	r1, r4, #6
 80009a8:	f889 0005 	strb.w	r0, [r9, #5]
 80009ac:	b2c9      	uxtb	r1, r1
 80009ae:	4630      	mov	r0, r6
 80009b0:	f7ff ffa2 	bl	80008f8 <BLQueueGetIdx>
 80009b4:	1de1      	adds	r1, r4, #7
 80009b6:	f889 0006 	strb.w	r0, [r9, #6]
 80009ba:	b2c9      	uxtb	r1, r1
 80009bc:	4630      	mov	r0, r6
 80009be:	f7ff ff9b 	bl	80008f8 <BLQueueGetIdx>
 80009c2:	f104 0108 	add.w	r1, r4, #8
 80009c6:	f889 0007 	strb.w	r0, [r9, #7]
 80009ca:	b2c9      	uxtb	r1, r1
 80009cc:	4630      	mov	r0, r6
 80009ce:	f7ff ff93 	bl	80008f8 <BLQueueGetIdx>
 80009d2:	4629      	mov	r1, r5
 80009d4:	f889 0008 	strb.w	r0, [r9, #8]
 80009d8:	4630      	mov	r0, r6
 80009da:	f7ff ff8d 	bl	80008f8 <BLQueueGetIdx>
 80009de:	f889 0009 	strb.w	r0, [r9, #9]

				q->start += i+10;
 80009e2:	7832      	ldrb	r2, [r6, #0]
				q->len -= (i+10);
 80009e4:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
				q->start += i+10;
 80009e8:	320a      	adds	r2, #10
				q->len -= (i+10);
 80009ea:	3b0a      	subs	r3, #10
 80009ec:	1b1b      	subs	r3, r3, r4
				q->start += i+10;
 80009ee:	4422      	add	r2, r4
				BLQueueFixBounds(q);
 80009f0:	4630      	mov	r0, r6
				q->start += i+10;
 80009f2:	7032      	strb	r2, [r6, #0]
				q->len -= (i+10);
 80009f4:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
				BLQueueFixBounds(q);
 80009f8:	f7ff ff58 	bl	80008ac <BLQueueFixBounds>
				return 1;
 80009fc:	2001      	movs	r0, #1
 80009fe:	e000      	b.n	8000a02 <BLQueueExtractInit+0xea>
			}
		}
	}
	return 0;
 8000a00:	2000      	movs	r0, #0
}
 8000a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a06:	bf00      	nop

08000a08 <BLQueueExtractData>:

//pulls a 20 byte command out of the buffer if one exists
	//Commands start with sopChar and end with 'E'
	//Also moves the start of the buffer to the end of the extracted command
	//returns 1 if command extracted, 0 if none found
uint8_t BLQueueExtractData(BLQueue *q, uint8_t *outBuf, uint8_t sopChar) {
 8000a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for(uint8_t i = 0; i < q->len - 19; i++) {
 8000a0c:	f890 8066 	ldrb.w	r8, [r0, #102]	; 0x66
 8000a10:	f1a8 0713 	sub.w	r7, r8, #19
 8000a14:	2f00      	cmp	r7, #0
 8000a16:	dd38      	ble.n	8000a8a <BLQueueExtractData+0x82>
 8000a18:	2400      	movs	r4, #0
 8000a1a:	4606      	mov	r6, r0
 8000a1c:	4689      	mov	r9, r1
 8000a1e:	4625      	mov	r5, r4
 8000a20:	e004      	b.n	8000a2c <BLQueueExtractData+0x24>
 8000a22:	3401      	adds	r4, #1
 8000a24:	b2e4      	uxtb	r4, r4
 8000a26:	42bc      	cmp	r4, r7
 8000a28:	4625      	mov	r5, r4
 8000a2a:	da2e      	bge.n	8000a8a <BLQueueExtractData+0x82>
		if(BLQueueGetIdx(q, i) == sopChar) {
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	4630      	mov	r0, r6
 8000a30:	f7ff ff62 	bl	80008f8 <BLQueueGetIdx>
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d1f4      	bne.n	8000a22 <BLQueueExtractData+0x1a>
			if(i+19 < q->len && BLQueueGetIdx(q, i+19) == 'E') {
 8000a38:	3513      	adds	r5, #19
 8000a3a:	4545      	cmp	r5, r8
 8000a3c:	daf1      	bge.n	8000a22 <BLQueueExtractData+0x1a>
 8000a3e:	f104 0113 	add.w	r1, r4, #19
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4630      	mov	r0, r6
 8000a46:	f7ff ff57 	bl	80008f8 <BLQueueGetIdx>
 8000a4a:	2845      	cmp	r0, #69	; 0x45
 8000a4c:	d1e9      	bne.n	8000a22 <BLQueueExtractData+0x1a>
				for(uint8_t j = 0; j < 20; j++)
					outBuf[j] = BLQueueGetIdx(q, i+j);
 8000a4e:	464d      	mov	r5, r9
 8000a50:	f809 2b13 	strb.w	r2, [r9], #19
 8000a54:	f1c5 0201 	rsb	r2, r5, #1
 8000a58:	4422      	add	r2, r4
 8000a5a:	1951      	adds	r1, r2, r5
 8000a5c:	b2c9      	uxtb	r1, r1
 8000a5e:	4630      	mov	r0, r6
 8000a60:	f7ff ff4a 	bl	80008f8 <BLQueueGetIdx>
 8000a64:	f805 0f01 	strb.w	r0, [r5, #1]!
				for(uint8_t j = 0; j < 20; j++)
 8000a68:	454d      	cmp	r5, r9
 8000a6a:	d1f6      	bne.n	8000a5a <BLQueueExtractData+0x52>

				q->start += i+20;
 8000a6c:	7832      	ldrb	r2, [r6, #0]
				q->len -= (i+20);
 8000a6e:	f896 3066 	ldrb.w	r3, [r6, #102]	; 0x66
				q->start += i+20;
 8000a72:	3214      	adds	r2, #20
				q->len -= (i+20);
 8000a74:	3b14      	subs	r3, #20
 8000a76:	1b1b      	subs	r3, r3, r4
				q->start += i+20;
 8000a78:	4422      	add	r2, r4
				BLQueueFixBounds(q);
 8000a7a:	4630      	mov	r0, r6
				q->start += i+20;
 8000a7c:	7032      	strb	r2, [r6, #0]
				q->len -= (i+20);
 8000a7e:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
				BLQueueFixBounds(q);
 8000a82:	f7ff ff13 	bl	80008ac <BLQueueFixBounds>
				return 1;
 8000a86:	2001      	movs	r0, #1
 8000a88:	e000      	b.n	8000a8c <BLQueueExtractData+0x84>
			}
		}
	}
	return 0;
 8000a8a:	2000      	movs	r0, #0
}
 8000a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000a90 <TinyBLInit>:
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

UART_HandleTypeDef UartHandle; //UART handler declaration
void TinyBLInit(void) {
 8000a90:	b530      	push	{r4, r5, lr}
 8000a92:	b097      	sub	sp, #92	; 0x5c
	HAL_Init();
 8000a94:	f000 f94a 	bl	8000d2c <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8000a9e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000aa6:	e9cd 3305 	strd	r3, r3, [sp, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	492c      	ldr	r1, [pc, #176]	; (8000b5c <TinyBLInit+0xcc>)
 8000aac:	9301      	str	r3, [sp, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	9307      	str	r3, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	6c08      	ldr	r0, [r1, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	4a2a      	ldr	r2, [pc, #168]	; (8000b60 <TinyBLInit+0xd0>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000aba:	6408      	str	r0, [r1, #64]	; 0x40
 8000abc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000abe:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000ac2:	9101      	str	r1, [sp, #4]
 8000ac4:	9901      	ldr	r1, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	6811      	ldr	r1, [r2, #0]
 8000aca:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000ace:	6011      	str	r1, [r2, #0]
 8000ad0:	6812      	ldr	r2, [r2, #0]
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad2:	930f      	str	r3, [sp, #60]	; 0x3c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2101      	movs	r1, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000adc:	9202      	str	r2, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae2:	2208      	movs	r2, #8
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000ae4:	23b4      	movs	r3, #180	; 0xb4
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000ae8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	9802      	ldr	r0, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	9408      	str	r4, [sp, #32]
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2202      	movs	r2, #2
 8000af2:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000afc:	9414      	str	r4, [sp, #80]	; 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f000 ff47 	bl	8001990 <HAL_RCC_OscConfig>
 8000b02:	b100      	cbz	r0, 8000b06 <TinyBLInit+0x76>
 8000b04:	e7fe      	b.n	8000b04 <TinyBLInit+0x74>
		for(;;);
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b06:	f000 fc2f 	bl	8001368 <HAL_PWREx_EnableOverDrive>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b100      	cbz	r0, 8000b10 <TinyBLInit+0x80>
 8000b0e:	e7fe      	b.n	8000b0e <TinyBLInit+0x7e>
		for(;;);
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	220f      	movs	r2, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	e9cd 2403 	strd	r2, r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b16:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1e:	a803      	add	r0, sp, #12
 8000b20:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b22:	9207      	str	r2, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b24:	e9cd 3505 	strd	r3, r5, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b28:	f000 fc6e 	bl	8001408 <HAL_RCC_ClockConfig>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	b100      	cbz	r0, 8000b32 <TinyBLInit+0xa2>
 8000b30:	e7fe      	b.n	8000b30 <TinyBLInit+0xa0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <TinyBLInit+0xd4>)
 8000b34:	4c0c      	ldr	r4, [pc, #48]	; (8000b68 <TinyBLInit+0xd8>)
	UartHandle.Init.BaudRate   = 57600;
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000b36:	611a      	str	r2, [r3, #16]
	UartHandle.Init.BaudRate   = 57600;
 8000b38:	f44f 4061 	mov.w	r0, #57600	; 0xe100
 8000b3c:	e9c3 4000 	strd	r4, r0, [r3]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000b40:	210c      	movs	r1, #12
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000b42:	4618      	mov	r0, r3
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000b44:	e9c3 2202 	strd	r2, r2, [r3, #8]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000b48:	e9c3 1205 	strd	r1, r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000b4e:	f001 f9bd 	bl	8001ecc <HAL_UART_Init>
 8000b52:	b908      	cbnz	r0, 8000b58 <TinyBLInit+0xc8>
	{
		//Initialization Error
		for(;;);
	}

}
 8000b54:	b017      	add	sp, #92	; 0x5c
 8000b56:	bd30      	pop	{r4, r5, pc}
 8000b58:	e7fe      	b.n	8000b58 <TinyBLInit+0xc8>
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000
 8000b64:	20000034 	.word	0x20000034
 8000b68:	40004800 	.word	0x40004800

08000b6c <TinyBLRAMLoader>:


void TinyBLRAMLoader(void) {
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	b0a0      	sub	sp, #128	; 0x80
	uint32_t dataRxCount = 0; //number of data messages received by loader
	uint8_t cmdBuf[20];

	//init fancy circular queue
	BLQueue q;
	BLQueueInit(&q);
 8000b72:	a806      	add	r0, sp, #24
 8000b74:	f7ff fe94 	bl	80008a0 <BLQueueInit>

	asm("nop");
 8000b78:	bf00      	nop
	//wait for an init message
	//init format: "I" + message count (uint32, LE) + start address (uint32, LE) + 'E'
	for(;;) {
		//uint16_t count;
		//HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 0);
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
 8000b7a:	4d3f      	ldr	r5, [pc, #252]	; (8000c78 <TinyBLRAMLoader+0x10c>)
 8000b7c:	682e      	ldr	r6, [r5, #0]
 8000b7e:	ac01      	add	r4, sp, #4
 8000b80:	6833      	ldr	r3, [r6, #0]
 8000b82:	0698      	lsls	r0, r3, #26
 8000b84:	d5fc      	bpl.n	8000b80 <TinyBLRAMLoader+0x14>
			//Add to input ring buffer
			BLQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
 8000b86:	6871      	ldr	r1, [r6, #4]
 8000b88:	a806      	add	r0, sp, #24
 8000b8a:	b2c9      	uxtb	r1, r1
 8000b8c:	f7ff fea0 	bl	80008d0 <BLQueueAdd>
			//BLQueueAddArray(&q, uartInBuf, count);
			//process for packets
			uint8_t isMessage = BLQueueExtractInit(&q, cmdBuf, 'I');
 8000b90:	2249      	movs	r2, #73	; 0x49
 8000b92:	4621      	mov	r1, r4
 8000b94:	f7ff fec0 	bl	8000918 <BLQueueExtractInit>
			if(isMessage) {
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d0f1      	beq.n	8000b80 <TinyBLRAMLoader+0x14>
				msgCount = *((uint32_t*)(cmdBuf+1));
				startAddr = *((uint32_t*)(cmdBuf+5));

				HAL_UART_Transmit(&UartHandle, "Init Received\r\n", 15, HAL_MAX_DELAY);
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	4936      	ldr	r1, [pc, #216]	; (8000c7c <TinyBLRAMLoader+0x110>)
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <TinyBLRAMLoader+0x10c>)
				msgCount = *((uint32_t*)(cmdBuf+1));
 8000ba4:	f8dd 9005 	ldr.w	r9, [sp, #5]
				startAddr = *((uint32_t*)(cmdBuf+5));
 8000ba8:	f8dd 6009 	ldr.w	r6, [sp, #9]
				HAL_UART_Transmit(&UartHandle, "Init Received\r\n", 15, HAL_MAX_DELAY);
 8000bac:	220f      	movs	r2, #15
 8000bae:	f001 f9dd 	bl	8001f6c <HAL_UART_Transmit>
				break;
			}
		}
	}
	BLQueueInit(&q);
 8000bb2:	a806      	add	r0, sp, #24
 8000bb4:	f7ff fe74 	bl	80008a0 <BLQueueInit>

	asm("nop");
 8000bb8:	bf00      	nop

	//receive all ramcode data messages
	uint32_t curAddr = startAddr;
	uint32_t recDataMsgCount = 0;
	for(uint32_t i = 0; i < msgCount; i++) {
 8000bba:	f1b9 0f00 	cmp.w	r9, #0
 8000bbe:	d030      	beq.n	8000c22 <TinyBLRAMLoader+0xb6>
	uint32_t recDataMsgCount = 0;
 8000bc0:	f04f 0800 	mov.w	r8, #0
 8000bc4:	f10d 0a06 	add.w	sl, sp, #6
 8000bc8:	f10d 0716 	add.w	r7, sp, #22
		for(;;) {
			//uint16_t count;
			if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
 8000bcc:	682a      	ldr	r2, [r5, #0]
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	0699      	lsls	r1, r3, #26
 8000bd2:	d5fc      	bpl.n	8000bce <TinyBLRAMLoader+0x62>
				//Add to input ring buffer
				BLQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
 8000bd4:	6851      	ldr	r1, [r2, #4]
 8000bd6:	a806      	add	r0, sp, #24
 8000bd8:	b2c9      	uxtb	r1, r1
 8000bda:	f7ff fe79 	bl	80008d0 <BLQueueAdd>
				//BLQueueAddArray(&q, uartInBuf, count);
				//process for packets
				uint8_t isMessage = BLQueueExtractData(&q, cmdBuf, 'D');
 8000bde:	2244      	movs	r2, #68	; 0x44
 8000be0:	4621      	mov	r1, r4
 8000be2:	f7ff ff11 	bl	8000a08 <BLQueueExtractData>
				if(isMessage) {
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d0f0      	beq.n	8000bcc <TinyBLRAMLoader+0x60>
 8000bea:	eba6 030a 	sub.w	r3, r6, sl
 8000bee:	2b02      	cmp	r3, #2
					recDataMsgCount++;
 8000bf0:	f108 0801 	add.w	r8, r8, #1
 8000bf4:	d936      	bls.n	8000c64 <TinyBLRAMLoader+0xf8>
					uint8_t *ramAddr = (uint8_t*)curAddr;
					for(uint8_t i = 0; i < 18; i++)
						ramAddr[i] = cmdBuf[i+1];
 8000bf6:	f8dd 3005 	ldr.w	r3, [sp, #5]
 8000bfa:	6033      	str	r3, [r6, #0]
 8000bfc:	f8dd 3009 	ldr.w	r3, [sp, #9]
 8000c00:	6073      	str	r3, [r6, #4]
 8000c02:	f8dd 300d 	ldr.w	r3, [sp, #13]
 8000c06:	60b3      	str	r3, [r6, #8]
 8000c08:	f8dd 3011 	ldr.w	r3, [sp, #17]
 8000c0c:	60f3      	str	r3, [r6, #12]
 8000c0e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8000c12:	7433      	strb	r3, [r6, #16]
 8000c14:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000c18:	7473      	strb	r3, [r6, #17]
	for(uint32_t i = 0; i < msgCount; i++) {
 8000c1a:	45c1      	cmp	r9, r8
					curAddr += 18;
 8000c1c:	f106 0612 	add.w	r6, r6, #18
	for(uint32_t i = 0; i < msgCount; i++) {
 8000c20:	d1d4      	bne.n	8000bcc <TinyBLRAMLoader+0x60>
				}
			}
		}
	}

	__asm("nop");
 8000c22:	bf00      	nop
	//init format: "I" + entry address (uint32, little endian) + 4 pad bytes + 'E'
	uint32_t entryAddr;
	for(;;) {
		//uint16_t count;
		//HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 0);
		if((UartHandle.Instance->SR & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
 8000c24:	682d      	ldr	r5, [r5, #0]
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	069b      	lsls	r3, r3, #26
 8000c2a:	d5fc      	bpl.n	8000c26 <TinyBLRAMLoader+0xba>
			//Add to input ring buffer
			BLQueueAdd(&q, (uint8_t)UartHandle.Instance->DR);
 8000c2c:	6869      	ldr	r1, [r5, #4]
 8000c2e:	a806      	add	r0, sp, #24
 8000c30:	b2c9      	uxtb	r1, r1
 8000c32:	f7ff fe4d 	bl	80008d0 <BLQueueAdd>

			//Add to input ring buffer
			//BLQueueAddArray(&q, uartInBuf, count);
			//process for packets
			uint8_t isMessage = BLQueueExtractInit(&q, cmdBuf, 'I');
 8000c36:	2249      	movs	r2, #73	; 0x49
 8000c38:	4621      	mov	r1, r4
 8000c3a:	f7ff fe6d 	bl	8000918 <BLQueueExtractInit>
			if(isMessage) {
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d0f1      	beq.n	8000c26 <TinyBLRAMLoader+0xba>
				entryAddr = *((uint32_t*)(cmdBuf+1));

				HAL_UART_Transmit(&UartHandle, "Branching to RAM\r\n", 16, HAL_MAX_DELAY);
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <TinyBLRAMLoader+0x114>)
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <TinyBLRAMLoader+0x10c>)
				entryAddr = *((uint32_t*)(cmdBuf+1));
 8000c4a:	f8dd 4005 	ldr.w	r4, [sp, #5]
				HAL_UART_Transmit(&UartHandle, "Branching to RAM\r\n", 16, HAL_MAX_DELAY);
 8000c4e:	2210      	movs	r2, #16
 8000c50:	f001 f98c 	bl	8001f6c <HAL_UART_Transmit>
				break;
			}
		}
	}
	BLQueueInit(&q);
 8000c54:	a806      	add	r0, sp, #24
 8000c56:	f7ff fe23 	bl	80008a0 <BLQueueInit>

	__asm("nop");
 8000c5a:	bf00      	nop

	//The most beautiful line of C ever written
	((void (*)(void)) entryAddr)();
 8000c5c:	47a0      	blx	r4
		//HAL_UARTEx_ReceiveToIdle_DMA(&UartHandle, uartInBuf, 0xff);
		//HAL_UARTEx_ReceiveToIdle_IT(&UartHandle, uartInBuf, 0xFF);
		//HAL_UART_Receive_IT(&UartHandle, uartInBuf, 1);
		//for(;;);
	}*/
}
 8000c5e:	b020      	add	sp, #128	; 0x80
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					uint8_t *ramAddr = (uint8_t*)curAddr;
 8000c64:	4623      	mov	r3, r4
 8000c66:	1b30      	subs	r0, r6, r4
 8000c68:	18c2      	adds	r2, r0, r3
						ramAddr[i] = cmdBuf[i+1];
 8000c6a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000c6e:	7011      	strb	r1, [r2, #0]
					for(uint8_t i = 0; i < 18; i++)
 8000c70:	42bb      	cmp	r3, r7
 8000c72:	d1f9      	bne.n	8000c68 <TinyBLRAMLoader+0xfc>
 8000c74:	e7d1      	b.n	8000c1a <TinyBLRAMLoader+0xae>
 8000c76:	bf00      	nop
 8000c78:	20000034 	.word	0x20000034
 8000c7c:	08002774 	.word	0x08002774
 8000c80:	08002784 	.word	0x08002784

08000c84 <TinyBLStartup>:

//Check digital pin and branches to TinyBL if set
//runs on startup
void TinyBLStartup(void) {
 8000c84:	b510      	push	{r4, lr}

	//TODO: return when digital pin is not set
	//needs digital pin init and read code. We'll configure the pin to pull down for convenience
	//init gpio pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	2300      	movs	r3, #0
void TinyBLStartup(void) {
 8000c88:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000c8e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <TinyBLStartup+0x48>)
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	6b13      	ldr	r3, [r2, #48]	; 0x30
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <TinyBLStartup+0x4c>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ca6:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cac:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb0:	9401      	str	r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb2:	f000 f993 	bl	8000fdc <HAL_GPIO_Init>

	if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <TinyBLStartup+0x4c>)
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f000 fb23 	bl	8001304 <HAL_GPIO_ReadPin>
 8000cbe:	b118      	cbz	r0, 8000cc8 <TinyBLStartup+0x44>
		return;

	TinyBLInit();
 8000cc0:	f7ff fee6 	bl	8000a90 <TinyBLInit>
		//UART_
		HAL_UART_Transmit(&UartHandle, printout, 17, HAL_MAX_DELAY);
	}*/

	//proceed to loader
	TinyBLRAMLoader();
 8000cc4:	f7ff ff52 	bl	8000b6c <TinyBLRAMLoader>
}
 8000cc8:	b006      	add	sp, #24
 8000cca:	bd10      	pop	{r4, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cd4:	f8df d038 	ldr.w	sp, [pc, #56]	; 8000d10 <LoopFillZerobss+0x12>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd8:	f7ff fdd0 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 fcf7 	bl	80026f4 <__libc_init_array>
//Call TinyBL operations
  bl  TinyBLStartup
 8000d06:	f7ff ffbd 	bl	8000c84 <TinyBLStartup>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc63 	bl	80005d4 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000d1c:	080027a8 	.word	0x080027a8
  ldr r2, =_sbss
 8000d20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000d24:	20000080 	.word	0x20000080

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f90d 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fd3a 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f917 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8ed 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000000c 	.word	0x2000000c
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	20000010 	.word	0x20000010

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000014 	.word	0x20000014
 8000df4:	2000007c 	.word	0x2000007c

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000007c 	.word	0x2000007c

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e165      	b.n	80012c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8154 	bne.w	80012be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80ae 	beq.w	80012be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a5c      	ldr	r2, [pc, #368]	; (80012dc <HAL_GPIO_Init+0x300>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b5a      	ldr	r3, [pc, #360]	; (80012dc <HAL_GPIO_Init+0x300>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_GPIO_Init+0x304>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4f      	ldr	r2, [pc, #316]	; (80012e4 <HAL_GPIO_Init+0x308>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d025      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4e      	ldr	r2, [pc, #312]	; (80012e8 <HAL_GPIO_Init+0x30c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x310>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d019      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x314>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x20e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x318>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x20a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x31c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x206>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x320>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x202>
 80011da:	2306      	movs	r3, #6
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x21c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x304>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b3a      	ldr	r3, [pc, #232]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a31      	ldr	r2, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x324>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_GPIO_Init+0x324>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012b8:	4a11      	ldr	r2, [pc, #68]	; (8001300 <HAL_GPIO_Init+0x324>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae96 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_PWREx_EnableOverDrive+0x94>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001394:	f7ff fd30 	bl	8000df8 <HAL_GetTick>
 8001398:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800139a:	e009      	b.n	80013b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800139c:	f7ff fd2c 	bl	8000df8 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013aa:	d901      	bls.n	80013b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e01f      	b.n	80013f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_PWREx_EnableOverDrive+0x98>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d1ee      	bne.n	800139c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff fd18 	bl	8000df8 <HAL_GetTick>
 80013c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ca:	e009      	b.n	80013e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013cc:	f7ff fd14 	bl	8000df8 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d901      	bls.n	80013e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e007      	b.n	80013f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_PWREx_EnableOverDrive+0x98>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013ec:	d1ee      	bne.n	80013cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	420e0040 	.word	0x420e0040
 8001400:	40007000 	.word	0x40007000
 8001404:	420e0044 	.word	0x420e0044

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0cc      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90c      	bls.n	8001444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d044      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e067      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4934      	ldr	r1, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fc7e 	bl	8000df8 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fc7a 	bl	8000df8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e04f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d20c      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f855 	bl	800163c <HAL_RCC_GetSysClockFreq>
 8001592:	4602      	mov	r2, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	490a      	ldr	r1, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	5ccb      	ldrb	r3, [r1, r3]
 80015a2:	fa22 f303 	lsr.w	r3, r2, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fbde 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	0800275c 	.word	0x0800275c
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	20000010 	.word	0x20000010

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000000c 	.word	0x2000000c

080015ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015f0:	f7ff fff0 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_RCC_GetPCLK1Freq+0x20>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	0a9b      	lsrs	r3, r3, #10
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	4903      	ldr	r1, [pc, #12]	; (8001610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	0800276c 	.word	0x0800276c

08001614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001618:	f7ff ffdc 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 800161c:	4602      	mov	r2, r0
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	0b5b      	lsrs	r3, r3, #13
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	4903      	ldr	r1, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800162a:	5ccb      	ldrb	r3, [r1, r3]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	0800276c 	.word	0x0800276c

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001640:	b0a6      	sub	sp, #152	; 0x98
 8001642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001662:	4bc8      	ldr	r3, [pc, #800]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b0c      	cmp	r3, #12
 800166c:	f200 817e 	bhi.w	800196c <HAL_RCC_GetSysClockFreq+0x330>
 8001670:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	080016ad 	.word	0x080016ad
 800167c:	0800196d 	.word	0x0800196d
 8001680:	0800196d 	.word	0x0800196d
 8001684:	0800196d 	.word	0x0800196d
 8001688:	080016b5 	.word	0x080016b5
 800168c:	0800196d 	.word	0x0800196d
 8001690:	0800196d 	.word	0x0800196d
 8001694:	0800196d 	.word	0x0800196d
 8001698:	080016bd 	.word	0x080016bd
 800169c:	0800196d 	.word	0x0800196d
 80016a0:	0800196d 	.word	0x0800196d
 80016a4:	0800196d 	.word	0x0800196d
 80016a8:	08001827 	.word	0x08001827
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4bb6      	ldr	r3, [pc, #728]	; (8001988 <HAL_RCC_GetSysClockFreq+0x34c>)
 80016ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80016b2:	e15f      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b4:	4bb5      	ldr	r3, [pc, #724]	; (800198c <HAL_RCC_GetSysClockFreq+0x350>)
 80016b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80016ba:	e15b      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	4bb1      	ldr	r3, [pc, #708]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c8:	4bae      	ldr	r3, [pc, #696]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d031      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d4:	4bab      	ldr	r3, [pc, #684]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	2200      	movs	r2, #0
 80016dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80016de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
 80016e8:	2300      	movs	r3, #0
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
 80016ec:	4ba7      	ldr	r3, [pc, #668]	; (800198c <HAL_RCC_GetSysClockFreq+0x350>)
 80016ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016f2:	462a      	mov	r2, r5
 80016f4:	fb03 f202 	mul.w	r2, r3, r2
 80016f8:	2300      	movs	r3, #0
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4aa2      	ldr	r2, [pc, #648]	; (800198c <HAL_RCC_GetSysClockFreq+0x350>)
 8001704:	4621      	mov	r1, r4
 8001706:	fba1 1202 	umull	r1, r2, r1, r2
 800170a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800170c:	460a      	mov	r2, r1
 800170e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001710:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001712:	4413      	add	r3, r2
 8001714:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800171a:	2200      	movs	r2, #0
 800171c:	65bb      	str	r3, [r7, #88]	; 0x58
 800171e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001720:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001724:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001728:	f7fe fd6c 	bl	8000204 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001736:	e064      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	653b      	str	r3, [r7, #80]	; 0x50
 8001742:	657a      	str	r2, [r7, #84]	; 0x54
 8001744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174a:	64bb      	str	r3, [r7, #72]	; 0x48
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001750:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001754:	4622      	mov	r2, r4
 8001756:	462b      	mov	r3, r5
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	0159      	lsls	r1, r3, #5
 8001762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001766:	0150      	lsls	r0, r2, #5
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4621      	mov	r1, r4
 800176e:	1a51      	subs	r1, r2, r1
 8001770:	6139      	str	r1, [r7, #16]
 8001772:	4629      	mov	r1, r5
 8001774:	eb63 0301 	sbc.w	r3, r3, r1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001786:	4659      	mov	r1, fp
 8001788:	018b      	lsls	r3, r1, #6
 800178a:	4651      	mov	r1, sl
 800178c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001790:	4651      	mov	r1, sl
 8001792:	018a      	lsls	r2, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ebb2 0801 	subs.w	r8, r2, r1
 800179a:	4659      	mov	r1, fp
 800179c:	eb63 0901 	sbc.w	r9, r3, r1
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b4:	4690      	mov	r8, r2
 80017b6:	4699      	mov	r9, r3
 80017b8:	4623      	mov	r3, r4
 80017ba:	eb18 0303 	adds.w	r3, r8, r3
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	462b      	mov	r3, r5
 80017c2:	eb49 0303 	adc.w	r3, r9, r3
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017d4:	4629      	mov	r1, r5
 80017d6:	028b      	lsls	r3, r1, #10
 80017d8:	4621      	mov	r1, r4
 80017da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017de:	4621      	mov	r1, r4
 80017e0:	028a      	lsls	r2, r1, #10
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ea:	2200      	movs	r2, #0
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
 80017ee:	647a      	str	r2, [r7, #68]	; 0x44
 80017f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017f4:	f7fe fd06 	bl	8000204 <__aeabi_uldivmod>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4613      	mov	r3, r2
 80017fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001802:	4b60      	ldr	r3, [pc, #384]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	3301      	adds	r3, #1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001814:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001824:	e0a6      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001826:	4b57      	ldr	r3, [pc, #348]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800182e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d02a      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	099b      	lsrs	r3, r3, #6
 8001844:	2200      	movs	r2, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
 8001848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001850:	2100      	movs	r1, #0
 8001852:	4b4e      	ldr	r3, [pc, #312]	; (800198c <HAL_RCC_GetSysClockFreq+0x350>)
 8001854:	fb03 f201 	mul.w	r2, r3, r1
 8001858:	2300      	movs	r3, #0
 800185a:	fb00 f303 	mul.w	r3, r0, r3
 800185e:	4413      	add	r3, r2
 8001860:	4a4a      	ldr	r2, [pc, #296]	; (800198c <HAL_RCC_GetSysClockFreq+0x350>)
 8001862:	fba0 1202 	umull	r1, r2, r0, r2
 8001866:	677a      	str	r2, [r7, #116]	; 0x74
 8001868:	460a      	mov	r2, r1
 800186a:	673a      	str	r2, [r7, #112]	; 0x70
 800186c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800186e:	4413      	add	r3, r2
 8001870:	677b      	str	r3, [r7, #116]	; 0x74
 8001872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001876:	2200      	movs	r2, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
 800187a:	637a      	str	r2, [r7, #52]	; 0x34
 800187c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001880:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001884:	f7fe fcbe 	bl	8000204 <__aeabi_uldivmod>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4613      	mov	r3, r2
 800188e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001892:	e05b      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	2200      	movs	r2, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
 800189e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
 80018ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b0:	4642      	mov	r2, r8
 80018b2:	464b      	mov	r3, r9
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0159      	lsls	r1, r3, #5
 80018be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c2:	0150      	lsls	r0, r2, #5
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4641      	mov	r1, r8
 80018ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ce:	4649      	mov	r1, r9
 80018d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e8:	ebb2 040a 	subs.w	r4, r2, sl
 80018ec:	eb63 050b 	sbc.w	r5, r3, fp
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	00eb      	lsls	r3, r5, #3
 80018fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fe:	00e2      	lsls	r2, r4, #3
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
 8001904:	4643      	mov	r3, r8
 8001906:	18e3      	adds	r3, r4, r3
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	464b      	mov	r3, r9
 800190c:	eb45 0303 	adc.w	r3, r5, r3
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800191e:	4629      	mov	r1, r5
 8001920:	028b      	lsls	r3, r1, #10
 8001922:	4621      	mov	r1, r4
 8001924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001928:	4621      	mov	r1, r4
 800192a:	028a      	lsls	r2, r1, #10
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001934:	2200      	movs	r2, #0
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	61fa      	str	r2, [r7, #28]
 800193a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800193e:	f7fe fc61 	bl	8000204 <__aeabi_uldivmod>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4613      	mov	r3, r2
 8001948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_RCC_GetSysClockFreq+0x348>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0f1b      	lsrs	r3, r3, #28
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800195a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800195e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800196a:	e003      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_GetSysClockFreq+0x34c>)
 800196e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001972:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001974:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001978:	4618      	mov	r0, r3
 800197a:	3798      	adds	r7, #152	; 0x98
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	00f42400 	.word	0x00f42400
 800198c:	017d7840 	.word	0x017d7840

08001990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e28d      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8083 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d019      	beq.n	80019f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019bc:	4b91      	ldr	r3, [pc, #580]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019c8:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d4:	d00c      	beq.n	80019f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b8b      	ldr	r3, [pc, #556]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d112      	bne.n	8001a08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e2:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	4b84      	ldr	r3, [pc, #528]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x124>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d157      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e25a      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x90>
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xcc>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xb4>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xcc>
 8001a44:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6b      	ldr	r2, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9c8 	bl	8000df8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9c4 	bl	8000df8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e21f      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xdc>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9b4 	bl	8000df8 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f9b0 	bl	8000df8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e20b      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x104>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d017      	beq.n	8001afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ada:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af2:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x186>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1d3      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4937      	ldr	r1, [pc, #220]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_RCC_OscConfig+0x278>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f95d 	bl	8000df8 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff f959 	bl	8000df8 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1b4      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4925      	ldr	r1, [pc, #148]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x278>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f93c 	bl	8000df8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f938 	bl	8000df8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e193      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d036      	beq.n	8001c1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d016      	beq.n	8001be4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f91c 	bl	8000df8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff f918 	bl	8000df8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e173      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x234>
 8001be2:	e01b      	b.n	8001c1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_RCC_OscConfig+0x27c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f905 	bl	8000df8 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f901 	bl	8000df8 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d907      	bls.n	8001c10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e15c      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	42470000 	.word	0x42470000
 8001c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b8a      	ldr	r3, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ea      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 8097 	beq.w	8001d58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a7e      	ldr	r2, [pc, #504]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f8c1 	bl	8000df8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff f8bd 	bl	8000df8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e118      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x4b0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x31e>
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x358>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x340>
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a60      	ldr	r2, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a5d      	ldr	r2, [pc, #372]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cce:	e00b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x358>
 8001cd0:	4b5a      	ldr	r3, [pc, #360]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd4:	4a59      	ldr	r2, [pc, #356]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	6713      	str	r3, [r2, #112]	; 0x70
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001ce2:	f023 0304 	bic.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf0:	f7ff f882 	bl	8000df8 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7ff f87e 	bl	8000df8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0d7      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0e:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0ee      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x368>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f86c 	bl	8000df8 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f868 	bl	8000df8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0c1      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3a:	4b40      	ldr	r3, [pc, #256]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ee      	bne.n	8001d24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d105      	bne.n	8001d58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a3a      	ldr	r2, [pc, #232]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80ad 	beq.w	8001ebc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d060      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d145      	bne.n	8001e02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f83c 	bl	8000df8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff f838 	bl	8000df8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e093      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	041b      	lsls	r3, r3, #16
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dcc:	071b      	lsls	r3, r3, #28
 8001dce:	491b      	ldr	r1, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff f80d 	bl	8000df8 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de2:	f7ff f809 	bl	8000df8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e064      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x452>
 8001e00:	e05c      	b.n	8001ebc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x4b4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7fe fff6 	bl	8000df8 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fff2 	bl	8000df8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04d      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x4ac>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x480>
 8001e2e:	e045      	b.n	8001ebc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e040      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_RCC_OscConfig+0x538>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d030      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d129      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d122      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d119      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d10f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800

08001ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e042      	b.n	8001f64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fc1e 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	; 0x24
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f973 	bl	80021fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d175      	bne.n	8002078 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_UART_Transmit+0x2c>
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e06e      	b.n	800207a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2221      	movs	r2, #33	; 0x21
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001faa:	f7fe ff25 	bl	8000df8 <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	88fa      	ldrh	r2, [r7, #6]
 8001fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc4:	d108      	bne.n	8001fd8 <HAL_UART_Transmit+0x6c>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	e003      	b.n	8001fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe0:	e02e      	b.n	8002040 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f848 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e03a      	b.n	800207a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10b      	bne.n	8002022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3302      	adds	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e007      	b.n	8002032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1cb      	bne.n	8001fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2200      	movs	r2, #0
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f814 	bl	8002082 <UART_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e006      	b.n	800207a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	4613      	mov	r3, r2
 8002090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002092:	e03b      	b.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d037      	beq.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209c:	f7fe feac 	bl	8000df8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d302      	bcc.n	80020b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e03a      	b.n	800212c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d020      	beq.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d01d      	beq.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d116      	bne.n	800210c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f81d 	bl	8002134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2208      	movs	r2, #8
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e00f      	b.n	800212c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d0b4      	beq.n	8002094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002134:	b480      	push	{r7}
 8002136:	b095      	sub	sp, #84	; 0x54
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002146:	e853 3f00 	ldrex	r3, [r3]
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	330c      	adds	r3, #12
 800215a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800215c:	643a      	str	r2, [r7, #64]	; 0x40
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e5      	bne.n	800213c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	e853 3f00 	ldrex	r3, [r3]
 800217e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3314      	adds	r3, #20
 800218e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002198:	e841 2300 	strex	r3, r2, [r1]
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e5      	bne.n	8002170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d119      	bne.n	80021e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	330c      	adds	r3, #12
 80021b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	e853 3f00 	ldrex	r3, [r3]
 80021ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 0310 	bic.w	r3, r3, #16
 80021c2:	647b      	str	r3, [r7, #68]	; 0x44
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	330c      	adds	r3, #12
 80021ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021cc:	61ba      	str	r2, [r7, #24]
 80021ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d0:	6979      	ldr	r1, [r7, #20]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	e841 2300 	strex	r3, r2, [r1]
 80021d8:	613b      	str	r3, [r7, #16]
   return(result);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e5      	bne.n	80021ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80021ee:	bf00      	nop
 80021f0:	3754      	adds	r7, #84	; 0x54
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002200:	b0c0      	sub	sp, #256	; 0x100
 8002202:	af00      	add	r7, sp, #0
 8002204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002218:	68d9      	ldr	r1, [r3, #12]
 800221a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	ea40 0301 	orr.w	r3, r0, r1
 8002224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	431a      	orrs	r2, r3
 8002234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	431a      	orrs	r2, r3
 800223c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002254:	f021 010c 	bic.w	r1, r1, #12
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002262:	430b      	orrs	r3, r1
 8002264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002276:	6999      	ldr	r1, [r3, #24]
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	ea40 0301 	orr.w	r3, r0, r1
 8002282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <UART_SetConfig+0x2cc>)
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <UART_SetConfig+0xa0>
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <UART_SetConfig+0x2d0>)
 8002298:	429a      	cmp	r2, r3
 800229a:	d104      	bne.n	80022a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800229c:	f7ff f9ba 	bl	8001614 <HAL_RCC_GetPCLK2Freq>
 80022a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022a4:	e003      	b.n	80022ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff f9a1 	bl	80015ec <HAL_RCC_GetPCLK1Freq>
 80022aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b8:	f040 810c 	bne.w	80024d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	1891      	adds	r1, r2, r2
 80022d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80022d6:	415b      	adcs	r3, r3
 80022d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022de:	4621      	mov	r1, r4
 80022e0:	eb12 0801 	adds.w	r8, r2, r1
 80022e4:	4629      	mov	r1, r5
 80022e6:	eb43 0901 	adc.w	r9, r3, r1
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022fe:	4690      	mov	r8, r2
 8002300:	4699      	mov	r9, r3
 8002302:	4623      	mov	r3, r4
 8002304:	eb18 0303 	adds.w	r3, r8, r3
 8002308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800230c:	462b      	mov	r3, r5
 800230e:	eb49 0303 	adc.w	r3, r9, r3
 8002312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800232a:	460b      	mov	r3, r1
 800232c:	18db      	adds	r3, r3, r3
 800232e:	653b      	str	r3, [r7, #80]	; 0x50
 8002330:	4613      	mov	r3, r2
 8002332:	eb42 0303 	adc.w	r3, r2, r3
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
 8002338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800233c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002340:	f7fd ff60 	bl	8000204 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4b61      	ldr	r3, [pc, #388]	; (80024d0 <UART_SetConfig+0x2d4>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	011c      	lsls	r4, r3, #4
 8002352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800235c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002364:	4642      	mov	r2, r8
 8002366:	464b      	mov	r3, r9
 8002368:	1891      	adds	r1, r2, r2
 800236a:	64b9      	str	r1, [r7, #72]	; 0x48
 800236c:	415b      	adcs	r3, r3
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002374:	4641      	mov	r1, r8
 8002376:	eb12 0a01 	adds.w	sl, r2, r1
 800237a:	4649      	mov	r1, r9
 800237c:	eb43 0b01 	adc.w	fp, r3, r1
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800238c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002394:	4692      	mov	sl, r2
 8002396:	469b      	mov	fp, r3
 8002398:	4643      	mov	r3, r8
 800239a:	eb1a 0303 	adds.w	r3, sl, r3
 800239e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023a2:	464b      	mov	r3, r9
 80023a4:	eb4b 0303 	adc.w	r3, fp, r3
 80023a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023c0:	460b      	mov	r3, r1
 80023c2:	18db      	adds	r3, r3, r3
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
 80023c6:	4613      	mov	r3, r2
 80023c8:	eb42 0303 	adc.w	r3, r2, r3
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44
 80023ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023d6:	f7fd ff15 	bl	8000204 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <UART_SetConfig+0x2d4>)
 80023e2:	fba3 2301 	umull	r2, r3, r3, r1
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2264      	movs	r2, #100	; 0x64
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	1acb      	subs	r3, r1, r3
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <UART_SetConfig+0x2d4>)
 80023f8:	fba3 2302 	umull	r2, r3, r3, r2
 80023fc:	095b      	lsrs	r3, r3, #5
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002404:	441c      	add	r4, r3
 8002406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002418:	4642      	mov	r2, r8
 800241a:	464b      	mov	r3, r9
 800241c:	1891      	adds	r1, r2, r2
 800241e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002420:	415b      	adcs	r3, r3
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002428:	4641      	mov	r1, r8
 800242a:	1851      	adds	r1, r2, r1
 800242c:	6339      	str	r1, [r7, #48]	; 0x30
 800242e:	4649      	mov	r1, r9
 8002430:	414b      	adcs	r3, r1
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002440:	4659      	mov	r1, fp
 8002442:	00cb      	lsls	r3, r1, #3
 8002444:	4651      	mov	r1, sl
 8002446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244a:	4651      	mov	r1, sl
 800244c:	00ca      	lsls	r2, r1, #3
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	4603      	mov	r3, r0
 8002454:	4642      	mov	r2, r8
 8002456:	189b      	adds	r3, r3, r2
 8002458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800245c:	464b      	mov	r3, r9
 800245e:	460a      	mov	r2, r1
 8002460:	eb42 0303 	adc.w	r3, r2, r3
 8002464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800247c:	460b      	mov	r3, r1
 800247e:	18db      	adds	r3, r3, r3
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	4613      	mov	r3, r2
 8002484:	eb42 0303 	adc.w	r3, r2, r3
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800248e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002492:	f7fd feb7 	bl	8000204 <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <UART_SetConfig+0x2d4>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	3332      	adds	r3, #50	; 0x32
 80024ae:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <UART_SetConfig+0x2d4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 0207 	and.w	r2, r3, #7
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4422      	add	r2, r4
 80024c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024c4:	e106      	b.n	80026d4 <UART_SetConfig+0x4d8>
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024e6:	4642      	mov	r2, r8
 80024e8:	464b      	mov	r3, r9
 80024ea:	1891      	adds	r1, r2, r2
 80024ec:	6239      	str	r1, [r7, #32]
 80024ee:	415b      	adcs	r3, r3
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024f6:	4641      	mov	r1, r8
 80024f8:	1854      	adds	r4, r2, r1
 80024fa:	4649      	mov	r1, r9
 80024fc:	eb43 0501 	adc.w	r5, r3, r1
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	00eb      	lsls	r3, r5, #3
 800250a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800250e:	00e2      	lsls	r2, r4, #3
 8002510:	4614      	mov	r4, r2
 8002512:	461d      	mov	r5, r3
 8002514:	4643      	mov	r3, r8
 8002516:	18e3      	adds	r3, r4, r3
 8002518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800251c:	464b      	mov	r3, r9
 800251e:	eb45 0303 	adc.w	r3, r5, r3
 8002522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002542:	4629      	mov	r1, r5
 8002544:	008b      	lsls	r3, r1, #2
 8002546:	4621      	mov	r1, r4
 8002548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800254c:	4621      	mov	r1, r4
 800254e:	008a      	lsls	r2, r1, #2
 8002550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002554:	f7fd fe56 	bl	8000204 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <UART_SetConfig+0x4e4>)
 800255e:	fba3 2302 	umull	r2, r3, r3, r2
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	011c      	lsls	r4, r3, #4
 8002566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800256a:	2200      	movs	r2, #0
 800256c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002578:	4642      	mov	r2, r8
 800257a:	464b      	mov	r3, r9
 800257c:	1891      	adds	r1, r2, r2
 800257e:	61b9      	str	r1, [r7, #24]
 8002580:	415b      	adcs	r3, r3
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002588:	4641      	mov	r1, r8
 800258a:	1851      	adds	r1, r2, r1
 800258c:	6139      	str	r1, [r7, #16]
 800258e:	4649      	mov	r1, r9
 8002590:	414b      	adcs	r3, r1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a0:	4659      	mov	r1, fp
 80025a2:	00cb      	lsls	r3, r1, #3
 80025a4:	4651      	mov	r1, sl
 80025a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025aa:	4651      	mov	r1, sl
 80025ac:	00ca      	lsls	r2, r1, #3
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	4642      	mov	r2, r8
 80025b6:	189b      	adds	r3, r3, r2
 80025b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025bc:	464b      	mov	r3, r9
 80025be:	460a      	mov	r2, r1
 80025c0:	eb42 0303 	adc.w	r3, r2, r3
 80025c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80025d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025e0:	4649      	mov	r1, r9
 80025e2:	008b      	lsls	r3, r1, #2
 80025e4:	4641      	mov	r1, r8
 80025e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ea:	4641      	mov	r1, r8
 80025ec:	008a      	lsls	r2, r1, #2
 80025ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025f2:	f7fd fe07 	bl	8000204 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <UART_SetConfig+0x4e4>)
 80025fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2264      	movs	r2, #100	; 0x64
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	1acb      	subs	r3, r1, r3
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	3332      	adds	r3, #50	; 0x32
 8002610:	4a33      	ldr	r2, [pc, #204]	; (80026e0 <UART_SetConfig+0x4e4>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	441c      	add	r4, r3
 800261e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002622:	2200      	movs	r2, #0
 8002624:	673b      	str	r3, [r7, #112]	; 0x70
 8002626:	677a      	str	r2, [r7, #116]	; 0x74
 8002628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800262c:	4642      	mov	r2, r8
 800262e:	464b      	mov	r3, r9
 8002630:	1891      	adds	r1, r2, r2
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	415b      	adcs	r3, r3
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800263c:	4641      	mov	r1, r8
 800263e:	1851      	adds	r1, r2, r1
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	4649      	mov	r1, r9
 8002644:	414b      	adcs	r3, r1
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002654:	4659      	mov	r1, fp
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	4651      	mov	r1, sl
 800265a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265e:	4651      	mov	r1, sl
 8002660:	00ca      	lsls	r2, r1, #3
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	4642      	mov	r2, r8
 800266a:	189b      	adds	r3, r3, r2
 800266c:	66bb      	str	r3, [r7, #104]	; 0x68
 800266e:	464b      	mov	r3, r9
 8002670:	460a      	mov	r2, r1
 8002672:	eb42 0303 	adc.w	r3, r2, r3
 8002676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	663b      	str	r3, [r7, #96]	; 0x60
 8002682:	667a      	str	r2, [r7, #100]	; 0x64
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002690:	4649      	mov	r1, r9
 8002692:	008b      	lsls	r3, r1, #2
 8002694:	4641      	mov	r1, r8
 8002696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800269a:	4641      	mov	r1, r8
 800269c:	008a      	lsls	r2, r1, #2
 800269e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026a2:	f7fd fdaf 	bl	8000204 <__aeabi_uldivmod>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <UART_SetConfig+0x4e4>)
 80026ac:	fba3 1302 	umull	r1, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	2164      	movs	r1, #100	; 0x64
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	3332      	adds	r3, #50	; 0x32
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <UART_SetConfig+0x4e4>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	f003 020f 	and.w	r2, r3, #15
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4422      	add	r2, r4
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026da:	46bd      	mov	sp, r7
 80026dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e0:	51eb851f 	.word	0x51eb851f

080026e4 <memset>:
 80026e4:	4402      	add	r2, r0
 80026e6:	4603      	mov	r3, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <__libc_init_array>:
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4d0d      	ldr	r5, [pc, #52]	; (800272c <__libc_init_array+0x38>)
 80026f8:	4c0d      	ldr	r4, [pc, #52]	; (8002730 <__libc_init_array+0x3c>)
 80026fa:	1b64      	subs	r4, r4, r5
 80026fc:	10a4      	asrs	r4, r4, #2
 80026fe:	2600      	movs	r6, #0
 8002700:	42a6      	cmp	r6, r4
 8002702:	d109      	bne.n	8002718 <__libc_init_array+0x24>
 8002704:	4d0b      	ldr	r5, [pc, #44]	; (8002734 <__libc_init_array+0x40>)
 8002706:	4c0c      	ldr	r4, [pc, #48]	; (8002738 <__libc_init_array+0x44>)
 8002708:	f000 f818 	bl	800273c <_init>
 800270c:	1b64      	subs	r4, r4, r5
 800270e:	10a4      	asrs	r4, r4, #2
 8002710:	2600      	movs	r6, #0
 8002712:	42a6      	cmp	r6, r4
 8002714:	d105      	bne.n	8002722 <__libc_init_array+0x2e>
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	f855 3b04 	ldr.w	r3, [r5], #4
 800271c:	4798      	blx	r3
 800271e:	3601      	adds	r6, #1
 8002720:	e7ee      	b.n	8002700 <__libc_init_array+0xc>
 8002722:	f855 3b04 	ldr.w	r3, [r5], #4
 8002726:	4798      	blx	r3
 8002728:	3601      	adds	r6, #1
 800272a:	e7f2      	b.n	8002712 <__libc_init_array+0x1e>
 800272c:	080027a0 	.word	0x080027a0
 8002730:	080027a0 	.word	0x080027a0
 8002734:	080027a0 	.word	0x080027a0
 8002738:	080027a4 	.word	0x080027a4

0800273c <_init>:
 800273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273e:	bf00      	nop
 8002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002742:	bc08      	pop	{r3}
 8002744:	469e      	mov	lr, r3
 8002746:	4770      	bx	lr

08002748 <_fini>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr
