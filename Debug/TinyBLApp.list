
TinyBLApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023f8  080023f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023f8  080023f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002400  08002400  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002414  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002414  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bd1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f4  00000000  00000000  00028c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  0002a448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055b  00000000  00000000  0002ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002052d  00000000  00000000  0002b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ca6  00000000  00000000  0004b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c47b5  00000000  00000000  0005527e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b48  00000000  00000000  00119a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011b57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002380 	.word	0x08002380

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002380 	.word	0x08002380

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000506:	f000 fe71 	bl	80011ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800050a:	f000 f83f 	bl	800058c <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	//UART init
	UartHandle.Instance        = USART3;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0x80>)
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <main+0x84>)
 8000512:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 115200;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <main+0x80>)
 8000516:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800051a:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0x80>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <main+0x80>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <main+0x80>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x80>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x80>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x80>)
 8000542:	f000 f915 	bl	8000770 <HAL_UART_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d000      	beq.n	800054e <main+0x4e>
	{
		//Initialization Error
		for(;;);
 800054c:	e7fe      	b.n	800054c <main+0x4c>
	}

	//HAL_UART_MspInit(&UartHandle);

	uint8_t printout[50] = "Hello from FLASH!\r\n";
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x88>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	6023      	str	r3, [r4, #0]
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	221e      	movs	r2, #30
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fedf 	bl	8002328 <memset>
	HAL_UART_Transmit(&UartHandle, printout, 20, HAL_MAX_DELAY);
 800056a:	1d39      	adds	r1, r7, #4
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	2214      	movs	r2, #20
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0x80>)
 8000574:	f000 f94c 	bl	8000810 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		asm("nop");
 8000578:	bf00      	nop
		asm("nop");
 800057a:	bf00      	nop
		asm("nop");
 800057c:	bf00      	nop
		asm("nop");
 800057e:	e7fb      	b.n	8000578 <main+0x78>
 8000580:	20000028 	.word	0x20000028
 8000584:	40004800 	.word	0x40004800
 8000588:	08002398 	.word	0x08002398

0800058c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fec4 	bl	8002328 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <SystemClock_Config+0xdc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <SystemClock_Config+0xdc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <SystemClock_Config+0xe0>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000600:	23b4      	movs	r3, #180	; 0xb4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fbe9 	bl	8001dec <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000620:	f000 f826 	bl	8000670 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000624:	f001 f8ce 	bl	80017c4 <HAL_PWREx_EnableOverDrive>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800062e:	f000 f81f 	bl	8000670 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f001 f907 	bl	8001864 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800065c:	f000 f808 	bl	8000670 <Error_Handler>
	}
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_UART_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;
		//##-1- Enable peripherals and GPIO Clocks #################################
		// Enable GPIO TX/RX clock
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <HAL_UART_MspInit+0x9c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_UART_MspInit+0x9c>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <HAL_UART_MspInit+0x9c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0308 	and.w	r3, r3, #8
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

		// Enable USARTx clock
		__HAL_RCC_USART3_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]

		//##-2- Configure peripheral GPIO ##########################################
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = GPIO_PIN_8;
 80006d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006dc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ea:	2307      	movs	r3, #7
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <HAL_UART_MspInit+0xa0>)
 80006f6:	f000 fed1 	bl	800149c <HAL_GPIO_Init>

		// UART RX GPIO pin configuration
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000700:	2307      	movs	r3, #7
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <HAL_UART_MspInit+0xa0>)
 800070c:	f000 fec6 	bl	800149c <HAL_GPIO_Init>


}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e042      	b.n	8000808 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ff70 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2224      	movs	r2, #36	; 0x24
 80007a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	68da      	ldr	r2, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80007b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f973 	bl	8000aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	691a      	ldr	r2, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80007c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80007d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80007e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2220      	movs	r2, #32
 80007f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2220      	movs	r2, #32
 80007fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af02      	add	r7, sp, #8
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4613      	mov	r3, r2
 800081e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b20      	cmp	r3, #32
 800082e:	d175      	bne.n	800091c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <HAL_UART_Transmit+0x2c>
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e06e      	b.n	800091e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2200      	movs	r2, #0
 8000844:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2221      	movs	r2, #33	; 0x21
 800084a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800084e:	f000 fd33 	bl	80012b8 <HAL_GetTick>
 8000852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	88fa      	ldrh	r2, [r7, #6]
 8000858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	88fa      	ldrh	r2, [r7, #6]
 800085e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000868:	d108      	bne.n	800087c <HAL_UART_Transmit+0x6c>
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	e003      	b.n	8000884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000884:	e02e      	b.n	80008e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f000 f848 	bl	8000926 <UART_WaitOnFlagUntilTimeout>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d005      	beq.n	80008a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2220      	movs	r2, #32
 80008a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80008a4:	2303      	movs	r3, #3
 80008a6:	e03a      	b.n	800091e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10b      	bne.n	80008c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	3302      	adds	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	e007      	b.n	80008d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	3301      	adds	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008da:	b29b      	uxth	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	b29a      	uxth	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1cb      	bne.n	8000886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2140      	movs	r1, #64	; 0x40
 80008f8:	68f8      	ldr	r0, [r7, #12]
 80008fa:	f000 f814 	bl	8000926 <UART_WaitOnFlagUntilTimeout>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2220      	movs	r2, #32
 8000908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800090c:	2303      	movs	r3, #3
 800090e:	e006      	b.n	800091e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2220      	movs	r2, #32
 8000914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	e000      	b.n	800091e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800091c:	2302      	movs	r3, #2
  }
}
 800091e:	4618      	mov	r0, r3
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4613      	mov	r3, r2
 8000934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000936:	e03b      	b.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093e:	d037      	beq.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000940:	f000 fcba 	bl	80012b8 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	429a      	cmp	r2, r3
 800094e:	d302      	bcc.n	8000956 <UART_WaitOnFlagUntilTimeout+0x30>
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8000956:	2303      	movs	r3, #3
 8000958:	e03a      	b.n	80009d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	2b00      	cmp	r3, #0
 8000966:	d023      	beq.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	2b80      	cmp	r3, #128	; 0x80
 800096c:	d020      	beq.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b40      	cmp	r3, #64	; 0x40
 8000972:	d01d      	beq.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	2b08      	cmp	r3, #8
 8000980:	d116      	bne.n	80009b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f000 f81d 	bl	80009d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2208      	movs	r2, #8
 80009a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e00f      	b.n	80009d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	4013      	ands	r3, r2
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	429a      	cmp	r2, r3
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d0b4      	beq.n	8000938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80009d8:	b480      	push	{r7}
 80009da:	b095      	sub	sp, #84	; 0x54
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	330c      	adds	r3, #12
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ea:	e853 3f00 	ldrex	r3, [r3]
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80009f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	330c      	adds	r3, #12
 80009fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a00:	643a      	str	r2, [r7, #64]	; 0x40
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a08:	e841 2300 	strex	r3, r2, [r1]
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8000a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1e5      	bne.n	80009e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3314      	adds	r3, #20
 8000a1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	e853 3f00 	ldrex	r3, [r3]
 8000a22:	61fb      	str	r3, [r7, #28]
   return(result);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f023 0301 	bic.w	r3, r3, #1
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3314      	adds	r3, #20
 8000a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a3c:	e841 2300 	strex	r3, r2, [r1]
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1e5      	bne.n	8000a14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d119      	bne.n	8000a84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	330c      	adds	r3, #12
 8000a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	e853 3f00 	ldrex	r3, [r3]
 8000a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f023 0310 	bic.w	r3, r3, #16
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a70:	61ba      	str	r2, [r7, #24]
 8000a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a74:	6979      	ldr	r1, [r7, #20]
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	e841 2300 	strex	r3, r2, [r1]
 8000a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1e5      	bne.n	8000a50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2220      	movs	r2, #32
 8000a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000a92:	bf00      	nop
 8000a94:	3754      	adds	r7, #84	; 0x54
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000aa4:	b0c0      	sub	sp, #256	; 0x100
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000abc:	68d9      	ldr	r1, [r3, #12]
 8000abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	ea40 0301 	orr.w	r3, r0, r1
 8000ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000af8:	f021 010c 	bic.w	r1, r1, #12
 8000afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000b06:	430b      	orrs	r3, r1
 8000b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b1a:	6999      	ldr	r1, [r3, #24]
 8000b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	ea40 0301 	orr.w	r3, r0, r1
 8000b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b8f      	ldr	r3, [pc, #572]	; (8000d6c <UART_SetConfig+0x2cc>)
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d005      	beq.n	8000b40 <UART_SetConfig+0xa0>
 8000b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b8d      	ldr	r3, [pc, #564]	; (8000d70 <UART_SetConfig+0x2d0>)
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d104      	bne.n	8000b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000b40:	f000 ff96 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8000b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000b48:	e003      	b.n	8000b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000b4a:	f000 ff7d 	bl	8001a48 <HAL_RCC_GetPCLK1Freq>
 8000b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b5c:	f040 810c 	bne.w	8000d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000b72:	4622      	mov	r2, r4
 8000b74:	462b      	mov	r3, r5
 8000b76:	1891      	adds	r1, r2, r2
 8000b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8000b7a:	415b      	adcs	r3, r3
 8000b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000b82:	4621      	mov	r1, r4
 8000b84:	eb12 0801 	adds.w	r8, r2, r1
 8000b88:	4629      	mov	r1, r5
 8000b8a:	eb43 0901 	adc.w	r9, r3, r1
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	eb18 0303 	adds.w	r3, r8, r3
 8000bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000bb0:	462b      	mov	r3, r5
 8000bb2:	eb49 0303 	adc.w	r3, r9, r3
 8000bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000bce:	460b      	mov	r3, r1
 8000bd0:	18db      	adds	r3, r3, r3
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	eb42 0303 	adc.w	r3, r2, r3
 8000bda:	657b      	str	r3, [r7, #84]	; 0x54
 8000bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000be4:	f7ff fb0e 	bl	8000204 <__aeabi_uldivmod>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4b61      	ldr	r3, [pc, #388]	; (8000d74 <UART_SetConfig+0x2d4>)
 8000bee:	fba3 2302 	umull	r2, r3, r3, r2
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	011c      	lsls	r4, r3, #4
 8000bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000c08:	4642      	mov	r2, r8
 8000c0a:	464b      	mov	r3, r9
 8000c0c:	1891      	adds	r1, r2, r2
 8000c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8000c10:	415b      	adcs	r3, r3
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000c18:	4641      	mov	r1, r8
 8000c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8000c1e:	4649      	mov	r1, r9
 8000c20:	eb43 0b01 	adc.w	fp, r3, r1
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c38:	4692      	mov	sl, r2
 8000c3a:	469b      	mov	fp, r3
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8000c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000c46:	464b      	mov	r3, r9
 8000c48:	eb4b 0303 	adc.w	r3, fp, r3
 8000c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8000c64:	460b      	mov	r3, r1
 8000c66:	18db      	adds	r3, r3, r3
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	eb42 0303 	adc.w	r3, r2, r3
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
 8000c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000c7a:	f7ff fac3 	bl	8000204 <__aeabi_uldivmod>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <UART_SetConfig+0x2d4>)
 8000c86:	fba3 2301 	umull	r2, r3, r3, r1
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2264      	movs	r2, #100	; 0x64
 8000c8e:	fb02 f303 	mul.w	r3, r2, r3
 8000c92:	1acb      	subs	r3, r1, r3
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <UART_SetConfig+0x2d4>)
 8000c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8000ca0:	095b      	lsrs	r3, r3, #5
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000ca8:	441c      	add	r4, r3
 8000caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	1891      	adds	r1, r2, r2
 8000cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8000cc4:	415b      	adcs	r3, r3
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000ccc:	4641      	mov	r1, r8
 8000cce:	1851      	adds	r1, r2, r1
 8000cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	414b      	adcs	r3, r1
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000ce4:	4659      	mov	r1, fp
 8000ce6:	00cb      	lsls	r3, r1, #3
 8000ce8:	4651      	mov	r1, sl
 8000cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000cee:	4651      	mov	r1, sl
 8000cf0:	00ca      	lsls	r2, r1, #3
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4642      	mov	r2, r8
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000d00:	464b      	mov	r3, r9
 8000d02:	460a      	mov	r2, r1
 8000d04:	eb42 0303 	adc.w	r3, r2, r3
 8000d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000d20:	460b      	mov	r3, r1
 8000d22:	18db      	adds	r3, r3, r3
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d26:	4613      	mov	r3, r2
 8000d28:	eb42 0303 	adc.w	r3, r2, r3
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000d36:	f7ff fa65 	bl	8000204 <__aeabi_uldivmod>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <UART_SetConfig+0x2d4>)
 8000d40:	fba3 1302 	umull	r1, r3, r3, r2
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	2164      	movs	r1, #100	; 0x64
 8000d48:	fb01 f303 	mul.w	r3, r1, r3
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	3332      	adds	r3, #50	; 0x32
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <UART_SetConfig+0x2d4>)
 8000d54:	fba2 2303 	umull	r2, r3, r2, r3
 8000d58:	095b      	lsrs	r3, r3, #5
 8000d5a:	f003 0207 	and.w	r2, r3, #7
 8000d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4422      	add	r2, r4
 8000d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000d68:	e106      	b.n	8000f78 <UART_SetConfig+0x4d8>
 8000d6a:	bf00      	nop
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40011400 	.word	0x40011400
 8000d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	464b      	mov	r3, r9
 8000d8e:	1891      	adds	r1, r2, r2
 8000d90:	6239      	str	r1, [r7, #32]
 8000d92:	415b      	adcs	r3, r3
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
 8000d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d9a:	4641      	mov	r1, r8
 8000d9c:	1854      	adds	r4, r2, r1
 8000d9e:	4649      	mov	r1, r9
 8000da0:	eb43 0501 	adc.w	r5, r3, r1
 8000da4:	f04f 0200 	mov.w	r2, #0
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	00eb      	lsls	r3, r5, #3
 8000dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000db2:	00e2      	lsls	r2, r4, #3
 8000db4:	4614      	mov	r4, r2
 8000db6:	461d      	mov	r5, r3
 8000db8:	4643      	mov	r3, r8
 8000dba:	18e3      	adds	r3, r4, r3
 8000dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	eb45 0303 	adc.w	r3, r5, r3
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000de6:	4629      	mov	r1, r5
 8000de8:	008b      	lsls	r3, r1, #2
 8000dea:	4621      	mov	r1, r4
 8000dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000df0:	4621      	mov	r1, r4
 8000df2:	008a      	lsls	r2, r1, #2
 8000df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000df8:	f7ff fa04 	bl	8000204 <__aeabi_uldivmod>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <UART_SetConfig+0x4e4>)
 8000e02:	fba3 2302 	umull	r2, r3, r3, r2
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	011c      	lsls	r4, r3, #4
 8000e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000e1c:	4642      	mov	r2, r8
 8000e1e:	464b      	mov	r3, r9
 8000e20:	1891      	adds	r1, r2, r2
 8000e22:	61b9      	str	r1, [r7, #24]
 8000e24:	415b      	adcs	r3, r3
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e2c:	4641      	mov	r1, r8
 8000e2e:	1851      	adds	r1, r2, r1
 8000e30:	6139      	str	r1, [r7, #16]
 8000e32:	4649      	mov	r1, r9
 8000e34:	414b      	adcs	r3, r1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	f04f 0200 	mov.w	r2, #0
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000e44:	4659      	mov	r1, fp
 8000e46:	00cb      	lsls	r3, r1, #3
 8000e48:	4651      	mov	r1, sl
 8000e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e4e:	4651      	mov	r1, sl
 8000e50:	00ca      	lsls	r2, r1, #3
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	4642      	mov	r2, r8
 8000e5a:	189b      	adds	r3, r3, r2
 8000e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e60:	464b      	mov	r3, r9
 8000e62:	460a      	mov	r2, r1
 8000e64:	eb42 0303 	adc.w	r3, r2, r3
 8000e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8000e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e78:	f04f 0200 	mov.w	r2, #0
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8000e84:	4649      	mov	r1, r9
 8000e86:	008b      	lsls	r3, r1, #2
 8000e88:	4641      	mov	r1, r8
 8000e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e8e:	4641      	mov	r1, r8
 8000e90:	008a      	lsls	r2, r1, #2
 8000e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000e96:	f7ff f9b5 	bl	8000204 <__aeabi_uldivmod>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <UART_SetConfig+0x4e4>)
 8000ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2264      	movs	r2, #100	; 0x64
 8000eaa:	fb02 f303 	mul.w	r3, r2, r3
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	3332      	adds	r3, #50	; 0x32
 8000eb4:	4a33      	ldr	r2, [pc, #204]	; (8000f84 <UART_SetConfig+0x4e4>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ec0:	441c      	add	r4, r3
 8000ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	673b      	str	r3, [r7, #112]	; 0x70
 8000eca:	677a      	str	r2, [r7, #116]	; 0x74
 8000ecc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	1891      	adds	r1, r2, r2
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	415b      	adcs	r3, r3
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ee0:	4641      	mov	r1, r8
 8000ee2:	1851      	adds	r1, r2, r1
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	414b      	adcs	r3, r1
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000ef8:	4659      	mov	r1, fp
 8000efa:	00cb      	lsls	r3, r1, #3
 8000efc:	4651      	mov	r1, sl
 8000efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f02:	4651      	mov	r1, sl
 8000f04:	00ca      	lsls	r2, r1, #3
 8000f06:	4610      	mov	r0, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4642      	mov	r2, r8
 8000f0e:	189b      	adds	r3, r3, r2
 8000f10:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f12:	464b      	mov	r3, r9
 8000f14:	460a      	mov	r2, r1
 8000f16:	eb42 0303 	adc.w	r3, r2, r3
 8000f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	663b      	str	r3, [r7, #96]	; 0x60
 8000f26:	667a      	str	r2, [r7, #100]	; 0x64
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8000f34:	4649      	mov	r1, r9
 8000f36:	008b      	lsls	r3, r1, #2
 8000f38:	4641      	mov	r1, r8
 8000f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000f3e:	4641      	mov	r1, r8
 8000f40:	008a      	lsls	r2, r1, #2
 8000f42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000f46:	f7ff f95d 	bl	8000204 <__aeabi_uldivmod>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <UART_SetConfig+0x4e4>)
 8000f50:	fba3 1302 	umull	r1, r3, r3, r2
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	2164      	movs	r1, #100	; 0x64
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	3332      	adds	r3, #50	; 0x32
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <UART_SetConfig+0x4e4>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	095b      	lsrs	r3, r3, #5
 8000f6a:	f003 020f 	and.w	r2, r3, #15
 8000f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4422      	add	r2, r4
 8000f76:	609a      	str	r2, [r3, #8]
}
 8000f78:	bf00      	nop
 8000f7a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f84:	51eb851f 	.word	0x51eb851f

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f95c 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <TinyBLInit>:
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

UART_HandleTypeDef UartHandle; //UART handler declaration
void TinyBLInit(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
	HAL_Init();
 8001006:	f000 f8f1 	bl	80011ec <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2234      	movs	r2, #52	; 0x34
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f001 f988 	bl	8002328 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <TinyBLInit+0x11c>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <TinyBLInit+0x11c>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <TinyBLInit+0x11c>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <TinyBLInit+0x120>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <TinyBLInit+0x120>)
 800104e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <TinyBLInit+0x120>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001074:	2308      	movs	r3, #8
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8001078:	23b4      	movs	r3, #180	; 0xb4
 800107a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001080:	2302      	movs	r3, #2
 8001082:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fead 	bl	8001dec <HAL_RCC_OscConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d000      	beq.n	800109a <TinyBLInit+0x9a>
	{
		for(;;);
 8001098:	e7fe      	b.n	8001098 <TinyBLInit+0x98>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800109a:	f000 fb93 	bl	80017c4 <HAL_PWREx_EnableOverDrive>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d000      	beq.n	80010a6 <TinyBLInit+0xa6>
	{
		for(;;);
 80010a4:	e7fe      	b.n	80010a4 <TinyBLInit+0xa4>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2302      	movs	r3, #2
 80010ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2105      	movs	r1, #5
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fbcd 	bl	8001864 <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d000      	beq.n	80010d2 <TinyBLInit+0xd2>
	{
		for(;;);
 80010d0:	e7fe      	b.n	80010d0 <TinyBLInit+0xd0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <TinyBLInit+0x124>)
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <TinyBLInit+0x128>)
 80010d6:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 115200;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <TinyBLInit+0x124>)
 80010da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010de:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <TinyBLInit+0x124>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <TinyBLInit+0x124>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <TinyBLInit+0x124>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <TinyBLInit+0x124>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <TinyBLInit+0x124>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <TinyBLInit+0x124>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <TinyBLInit+0x124>)
 8001106:	f7ff fb33 	bl	8000770 <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d000      	beq.n	8001112 <TinyBLInit+0x112>
	{
		//Initialization Error
		for(;;);
 8001110:	e7fe      	b.n	8001110 <TinyBLInit+0x110>
	}

}
 8001112:	bf00      	nop
 8001114:	3750      	adds	r7, #80	; 0x50
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40007000 	.word	0x40007000
 8001124:	20000028 	.word	0x20000028
 8001128:	40004800 	.word	0x40004800

0800112c <TinyBLStartup>:


//Check digital pin and branches to TinyBL if set
//runs on startup
void TinyBLStartup(void) {
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08e      	sub	sp, #56	; 0x38
 8001130:	af00      	add	r7, sp, #0

	//TODO: return when digital pin is not set
	//needs digital pin init and read code. We'll configure the pin to pull down for convenience

	TinyBLInit();
 8001132:	f7ff ff65 	bl	8001000 <TinyBLInit>

	//temp UART test
	uint8_t printout[50] = "Hello from BL!\r\n";
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <TinyBLStartup+0x60>)
 8001138:	1d3c      	adds	r4, r7, #4
 800113a:	461d      	mov	r5, r3
 800113c:	6828      	ldr	r0, [r5, #0]
 800113e:	6869      	ldr	r1, [r5, #4]
 8001140:	68aa      	ldr	r2, [r5, #8]
 8001142:	68eb      	ldr	r3, [r5, #12]
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	7c2b      	ldrb	r3, [r5, #16]
 8001148:	7023      	strb	r3, [r4, #0]
 800114a:	f107 0315 	add.w	r3, r7, #21
 800114e:	2221      	movs	r2, #33	; 0x21
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 f8e8 	bl	8002328 <memset>
	for(uint8_t i = 0; i < 1; i++) {
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800115e:	e00b      	b.n	8001178 <TinyBLStartup+0x4c>
		//UART_
		HAL_UART_Transmit(&UartHandle, printout, 17, HAL_MAX_DELAY);
 8001160:	1d39      	adds	r1, r7, #4
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	2211      	movs	r2, #17
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <TinyBLStartup+0x64>)
 800116a:	f7ff fb51 	bl	8000810 <HAL_UART_Transmit>
	for(uint8_t i = 0; i < 1; i++) {
 800116e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001172:	3301      	adds	r3, #1
 8001174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0ef      	beq.n	8001160 <TinyBLStartup+0x34>
	}


}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3738      	adds	r7, #56	; 0x38
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	080023cc 	.word	0x080023cc
 8001190:	20000028 	.word	0x20000028

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d038 	ldr.w	sp, [pc, #56]	; 80011d0 <LoopFillZerobss+0x12>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001198:	f7ff ff20 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119e:	490e      	ldr	r1, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a0:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b4:	4c0b      	ldr	r4, [pc, #44]	; (80011e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f001 f8b9 	bl	8002338 <__libc_init_array>
//Call TinyBL operations
  bl  TinyBLStartup
 80011c6:	f7ff ffb1 	bl	800112c <TinyBLStartup>
/* Call the application's entry point.*/
  bl  main
 80011ca:	f7ff f999 	bl	8000500 <main>
  bx  lr    
 80011ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011dc:	08002408 	.word	0x08002408
  ldr r2, =_sbss
 80011e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011e4:	20000074 	.word	0x20000074

080011e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_Init+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_Init+0x40>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_Init+0x40>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_Init+0x40>)
 800120e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001214:	2003      	movs	r0, #3
 8001216:	f000 f90d 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121a:	200f      	movs	r0, #15
 800121c:	f000 f808 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001220:	f7ff fa7e 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f917 	bl	8001482 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f8ed 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000070 	.word	0x20000070

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000070 	.word	0x20000070

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff47 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5c 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb0 	bl	80013f0 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e165      	b.n	8001784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8154 	bne.w	800177e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d005      	beq.n	80014ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d130      	bne.n	8001550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b03      	cmp	r3, #3
 800155a:	d017      	beq.n	800158c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80ae 	beq.w	800177e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_GPIO_Init+0x300>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a5c      	ldr	r2, [pc, #368]	; (800179c <HAL_GPIO_Init+0x300>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b5a      	ldr	r3, [pc, #360]	; (800179c <HAL_GPIO_Init+0x300>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <HAL_GPIO_Init+0x304>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_GPIO_Init+0x308>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d025      	beq.n	80016b6 <HAL_GPIO_Init+0x21a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4e      	ldr	r2, [pc, #312]	; (80017a8 <HAL_GPIO_Init+0x30c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01f      	beq.n	80016b2 <HAL_GPIO_Init+0x216>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4d      	ldr	r2, [pc, #308]	; (80017ac <HAL_GPIO_Init+0x310>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0x212>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <HAL_GPIO_Init+0x314>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x20e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4b      	ldr	r2, [pc, #300]	; (80017b4 <HAL_GPIO_Init+0x318>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x20a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4a      	ldr	r2, [pc, #296]	; (80017b8 <HAL_GPIO_Init+0x31c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x206>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_GPIO_Init+0x320>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x202>
 800169a:	2306      	movs	r3, #6
 800169c:	e00c      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 800169e:	2307      	movs	r3, #7
 80016a0:	e00a      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x21c>
 80016b6:	2300      	movs	r3, #0
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	; (80017a0 <HAL_GPIO_Init+0x304>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_GPIO_Init+0x324>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a31      	ldr	r2, [pc, #196]	; (80017c0 <HAL_GPIO_Init+0x324>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_GPIO_Init+0x324>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_GPIO_Init+0x324>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_GPIO_Init+0x324>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_GPIO_Init+0x324>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_GPIO_Init+0x324>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001778:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_GPIO_Init+0x324>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f67f ae96 	bls.w	80014b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40021400 	.word	0x40021400
 80017bc:	40021800 	.word	0x40021800
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_PWREx_EnableOverDrive+0x90>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_PWREx_EnableOverDrive+0x90>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_PWREx_EnableOverDrive+0x90>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_PWREx_EnableOverDrive+0x94>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff fd62 	bl	80012b8 <HAL_GetTick>
 80017f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f6:	e009      	b.n	800180c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f8:	f7ff fd5e 	bl	80012b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001806:	d901      	bls.n	800180c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e01f      	b.n	800184c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_PWREx_EnableOverDrive+0x98>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d1ee      	bne.n	80017f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001820:	f7ff fd4a 	bl	80012b8 <HAL_GetTick>
 8001824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001826:	e009      	b.n	800183c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001828:	f7ff fd46 	bl	80012b8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001836:	d901      	bls.n	800183c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e007      	b.n	800184c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_PWREx_EnableOverDrive+0x98>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001848:	d1ee      	bne.n	8001828 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	420e0040 	.word	0x420e0040
 800185c:	40007000 	.word	0x40007000
 8001860:	420e0044 	.word	0x420e0044

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fcb0 	bl	80012b8 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fcac 	bl	80012b8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f855 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc10 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	080023e0 	.word	0x080023e0
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000

08001a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	0a9b      	lsrs	r3, r3, #10
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	4903      	ldr	r1, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a5e:	5ccb      	ldrb	r3, [r1, r3]
 8001a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080023f0 	.word	0x080023f0

08001a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a74:	f7ff ffdc 	bl	8001a30 <HAL_RCC_GetHCLKFreq>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0b5b      	lsrs	r3, r3, #13
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	4903      	ldr	r1, [pc, #12]	; (8001a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a86:	5ccb      	ldrb	r3, [r1, r3]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080023f0 	.word	0x080023f0

08001a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a9c:	b0a6      	sub	sp, #152	; 0x98
 8001a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abe:	4bc8      	ldr	r3, [pc, #800]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	f200 817e 	bhi.w	8001dc8 <HAL_RCC_GetSysClockFreq+0x330>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001b09 	.word	0x08001b09
 8001ad8:	08001dc9 	.word	0x08001dc9
 8001adc:	08001dc9 	.word	0x08001dc9
 8001ae0:	08001dc9 	.word	0x08001dc9
 8001ae4:	08001b11 	.word	0x08001b11
 8001ae8:	08001dc9 	.word	0x08001dc9
 8001aec:	08001dc9 	.word	0x08001dc9
 8001af0:	08001dc9 	.word	0x08001dc9
 8001af4:	08001b19 	.word	0x08001b19
 8001af8:	08001dc9 	.word	0x08001dc9
 8001afc:	08001dc9 	.word	0x08001dc9
 8001b00:	08001dc9 	.word	0x08001dc9
 8001b04:	08001c83 	.word	0x08001c83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4bb6      	ldr	r3, [pc, #728]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001b0e:	e15f      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b10:	4bb5      	ldr	r3, [pc, #724]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b16:	e15b      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4bb1      	ldr	r3, [pc, #708]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b24:	4bae      	ldr	r3, [pc, #696]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d031      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b30:	4bab      	ldr	r3, [pc, #684]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	099b      	lsrs	r3, r3, #6
 8001b36:	2200      	movs	r2, #0
 8001b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b42:	663b      	str	r3, [r7, #96]	; 0x60
 8001b44:	2300      	movs	r3, #0
 8001b46:	667b      	str	r3, [r7, #100]	; 0x64
 8001b48:	4ba7      	ldr	r3, [pc, #668]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b4a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b4e:	462a      	mov	r2, r5
 8001b50:	fb03 f202 	mul.w	r2, r3, r2
 8001b54:	2300      	movs	r3, #0
 8001b56:	4621      	mov	r1, r4
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4aa2      	ldr	r2, [pc, #648]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b60:	4621      	mov	r1, r4
 8001b62:	fba1 1202 	umull	r1, r2, r1, r2
 8001b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b68:	460a      	mov	r2, r1
 8001b6a:	67ba      	str	r2, [r7, #120]	; 0x78
 8001b6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b6e:	4413      	add	r3, r2
 8001b70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b76:	2200      	movs	r2, #0
 8001b78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b84:	f7fe fb3e 	bl	8000204 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b92:	e064      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b94:	4b92      	ldr	r3, [pc, #584]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b9e:	657a      	str	r2, [r7, #84]	; 0x54
 8001ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ba8:	2300      	movs	r3, #0
 8001baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f04f 0100 	mov.w	r1, #0
 8001bbc:	0159      	lsls	r1, r3, #5
 8001bbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc2:	0150      	lsls	r0, r2, #5
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4621      	mov	r1, r4
 8001bca:	1a51      	subs	r1, r2, r1
 8001bcc:	6139      	str	r1, [r7, #16]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001be2:	4659      	mov	r1, fp
 8001be4:	018b      	lsls	r3, r1, #6
 8001be6:	4651      	mov	r1, sl
 8001be8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bec:	4651      	mov	r1, sl
 8001bee:	018a      	lsls	r2, r1, #6
 8001bf0:	4651      	mov	r1, sl
 8001bf2:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf6:	4659      	mov	r1, fp
 8001bf8:	eb63 0901 	sbc.w	r9, r3, r1
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c10:	4690      	mov	r8, r2
 8001c12:	4699      	mov	r9, r3
 8001c14:	4623      	mov	r3, r4
 8001c16:	eb18 0303 	adds.w	r3, r8, r3
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	eb49 0303 	adc.w	r3, r9, r3
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c30:	4629      	mov	r1, r5
 8001c32:	028b      	lsls	r3, r1, #10
 8001c34:	4621      	mov	r1, r4
 8001c36:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	028a      	lsls	r2, r1, #10
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c46:	2200      	movs	r2, #0
 8001c48:	643b      	str	r3, [r7, #64]	; 0x40
 8001c4a:	647a      	str	r2, [r7, #68]	; 0x44
 8001c4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c50:	f7fe fad8 	bl	8000204 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5e:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001c70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c82:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cac:	2100      	movs	r1, #0
 8001cae:	4b4e      	ldr	r3, [pc, #312]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cb0:	fb03 f201 	mul.w	r2, r3, r1
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	fb00 f303 	mul.w	r3, r0, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x350>)
 8001cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001cc2:	677a      	str	r2, [r7, #116]	; 0x74
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	673a      	str	r2, [r7, #112]	; 0x70
 8001cc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001cca:	4413      	add	r3, r2
 8001ccc:	677b      	str	r3, [r7, #116]	; 0x74
 8001cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd6:	637a      	str	r2, [r7, #52]	; 0x34
 8001cd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ce0:	f7fe fa90 	bl	8000204 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cee:	e05b      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d90:	2200      	movs	r2, #0
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	61fa      	str	r2, [r7, #28]
 8001d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9a:	f7fe fa33 	bl	8000204 <__aeabi_uldivmod>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4613      	mov	r3, r2
 8001da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x348>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0f1b      	lsrs	r3, r3, #28
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dc6:	e003      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001dce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3798      	adds	r7, #152	; 0x98
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	00f42400 	.word	0x00f42400
 8001de8:	017d7840 	.word	0x017d7840

08001dec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e28d      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8083 	beq.w	8001f12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e0c:	4b94      	ldr	r3, [pc, #592]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e18:	4b91      	ldr	r3, [pc, #580]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e24:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e30:	d00c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d112      	bne.n	8001e64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d05b      	beq.n	8001f10 <HAL_RCC_OscConfig+0x124>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d157      	bne.n	8001f10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e25a      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6c:	d106      	bne.n	8001e7c <HAL_RCC_OscConfig+0x90>
 8001e6e:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7b      	ldr	r2, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xcc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xb4>
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a75      	ldr	r2, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a72      	ldr	r2, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xcc>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b6c      	ldr	r3, [pc, #432]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f9fa 	bl	80012b8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff f9f6 	bl	80012b8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e21f      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xdc>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f9e6 	bl	80012b8 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f9e2 	bl	80012b8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e20b      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b57      	ldr	r3, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x104>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d06f      	beq.n	8001ffe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f1e:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d017      	beq.n	8001f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2a:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x186>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1d3      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x278>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff f98f 	bl	80012b8 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff f98b 	bl	80012b8 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1b4      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4925      	ldr	r1, [pc, #148]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x278>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f96e 	bl	80012b8 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f96a 	bl	80012b8 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e193      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d036      	beq.n	8002078 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x27c>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff f94e 	bl	80012b8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff f94a 	bl	80012b8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e173      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x234>
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x27c>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff f937 	bl	80012b8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	e00e      	b.n	800206c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff f933 	bl	80012b8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d907      	bls.n	800206c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e15c      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
 8002060:	40023800 	.word	0x40023800
 8002064:	42470000 	.word	0x42470000
 8002068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b8a      	ldr	r3, [pc, #552]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ea      	bne.n	800204e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8097 	beq.w	80021b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b83      	ldr	r3, [pc, #524]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b7f      	ldr	r3, [pc, #508]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a7e      	ldr	r2, [pc, #504]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b79      	ldr	r3, [pc, #484]	; (800229c <HAL_RCC_OscConfig+0x4b0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x4b0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a75      	ldr	r2, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x4b0>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff f8f3 	bl	80012b8 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff f8ef 	bl	80012b8 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e118      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x4b0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x31e>
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e01c      	b.n	8002144 <HAL_RCC_OscConfig+0x358>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x340>
 8002112:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x358>
 800212c:	4b5a      	ldr	r3, [pc, #360]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a59      	ldr	r2, [pc, #356]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	4b57      	ldr	r3, [pc, #348]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a56      	ldr	r2, [pc, #344]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff f8b4 	bl	80012b8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff f8b0 	bl	80012b8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0d7      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ee      	beq.n	8002154 <HAL_RCC_OscConfig+0x368>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff f89e 	bl	80012b8 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff f89a 	bl	80012b8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0c1      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ad 	beq.w	8002318 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d060      	beq.n	800228c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d145      	bne.n	800225e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x4b4>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f86e 	bl	80012b8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff f86a 	bl	80012b8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e093      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4b4>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7ff f83f 	bl	80012b8 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff f83b 	bl	80012b8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e064      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x452>
 800225c:	e05c      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x4b4>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f828 	bl	80012b8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f824 	bl	80012b8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e04d      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x480>
 800228a:	e045      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e040      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000
 80022a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_OscConfig+0x538>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d030      	beq.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d129      	bne.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d122      	bne.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022dc:	4293      	cmp	r3, r2
 80022de:	d119      	bne.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10f      	bne.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <memset>:
 8002328:	4402      	add	r2, r0
 800232a:	4603      	mov	r3, r0
 800232c:	4293      	cmp	r3, r2
 800232e:	d100      	bne.n	8002332 <memset+0xa>
 8002330:	4770      	bx	lr
 8002332:	f803 1b01 	strb.w	r1, [r3], #1
 8002336:	e7f9      	b.n	800232c <memset+0x4>

08002338 <__libc_init_array>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	4d0d      	ldr	r5, [pc, #52]	; (8002370 <__libc_init_array+0x38>)
 800233c:	4c0d      	ldr	r4, [pc, #52]	; (8002374 <__libc_init_array+0x3c>)
 800233e:	1b64      	subs	r4, r4, r5
 8002340:	10a4      	asrs	r4, r4, #2
 8002342:	2600      	movs	r6, #0
 8002344:	42a6      	cmp	r6, r4
 8002346:	d109      	bne.n	800235c <__libc_init_array+0x24>
 8002348:	4d0b      	ldr	r5, [pc, #44]	; (8002378 <__libc_init_array+0x40>)
 800234a:	4c0c      	ldr	r4, [pc, #48]	; (800237c <__libc_init_array+0x44>)
 800234c:	f000 f818 	bl	8002380 <_init>
 8002350:	1b64      	subs	r4, r4, r5
 8002352:	10a4      	asrs	r4, r4, #2
 8002354:	2600      	movs	r6, #0
 8002356:	42a6      	cmp	r6, r4
 8002358:	d105      	bne.n	8002366 <__libc_init_array+0x2e>
 800235a:	bd70      	pop	{r4, r5, r6, pc}
 800235c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002360:	4798      	blx	r3
 8002362:	3601      	adds	r6, #1
 8002364:	e7ee      	b.n	8002344 <__libc_init_array+0xc>
 8002366:	f855 3b04 	ldr.w	r3, [r5], #4
 800236a:	4798      	blx	r3
 800236c:	3601      	adds	r6, #1
 800236e:	e7f2      	b.n	8002356 <__libc_init_array+0x1e>
 8002370:	08002400 	.word	0x08002400
 8002374:	08002400 	.word	0x08002400
 8002378:	08002400 	.word	0x08002400
 800237c:	08002404 	.word	0x08002404

08002380 <_init>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr

0800238c <_fini>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	bf00      	nop
 8002390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002392:	bc08      	pop	{r3}
 8002394:	469e      	mov	lr, r3
 8002396:	4770      	bx	lr
