
TinyBLApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800288c  0800288c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002894  08002894  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002894  08002894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800289c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080028a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080028a8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008edc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001858  00000000  00000000  00028f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  0002a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000587  00000000  00000000  0002aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204cc  00000000  00000000  0002b47f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009e98  00000000  00000000  0004b94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c48c3  00000000  00000000  000557e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c50  00000000  00000000  0011a0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002804 	.word	0x08002804

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002804 	.word	0x08002804

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000506:	f000 fbd3 	bl	8000cb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800050a:	f000 f83f 	bl	800058c <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	//UART init
	UartHandle.Instance        = USART3;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <main+0x80>)
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <main+0x84>)
 8000512:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <main+0x80>)
 8000516:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800051a:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0x80>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <main+0x80>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x80>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <main+0x80>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <main+0x80>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x80>)
 800053c:	2200      	movs	r2, #0
 800053e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x80>)
 8000542:	f001 fc53 	bl	8001dec <HAL_UART_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d000      	beq.n	800054e <main+0x4e>
	{
		//Initialization Error
		for(;;);
 800054c:	e7fe      	b.n	800054c <main+0x4c>
	}

	//HAL_UART_MspInit(&UartHandle);

	uint8_t printout[50] = "Hello from FLASH!\r\n";
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x88>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	6023      	str	r3, [r4, #0]
 800055c:	f107 0318 	add.w	r3, r7, #24
 8000560:	221e      	movs	r2, #30
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f002 f921 	bl	80027ac <memset>
	HAL_UART_Transmit(&UartHandle, printout, 20, HAL_MAX_DELAY);
 800056a:	1d39      	adds	r1, r7, #4
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
 8000570:	2214      	movs	r2, #20
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0x80>)
 8000574:	f001 fc8a 	bl	8001e8c <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		asm("nop");
 8000578:	bf00      	nop
		asm("nop");
 800057a:	bf00      	nop
		asm("nop");
 800057c:	bf00      	nop
		asm("nop");
 800057e:	e7fb      	b.n	8000578 <main+0x78>
 8000580:	20000028 	.word	0x20000028
 8000584:	40004800 	.word	0x40004800
 8000588:	0800281c 	.word	0x0800281c

0800058c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	; 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f906 	bl	80027ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <SystemClock_Config+0xdc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a2b      	ldr	r2, [pc, #172]	; (8000668 <SystemClock_Config+0xdc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xdc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <SystemClock_Config+0xe0>)
 80005d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SystemClock_Config+0xe0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000600:	23b4      	movs	r3, #180	; 0xb4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f94b 	bl	80018b0 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000620:	f000 f826 	bl	8000670 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000624:	f000 fe30 	bl	8001288 <HAL_PWREx_EnableOverDrive>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800062e:	f000 f81f 	bl	8000670 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fe69 	bl	8001328 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800065c:	f000 f808 	bl	8000670 <Error_Handler>
	}
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_UART_MspInit>:

/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;
		//##-1- Enable peripherals and GPIO Clocks #################################
		// Enable GPIO TX/RX clock
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <HAL_UART_MspInit+0x9c>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a22      	ldr	r2, [pc, #136]	; (8000718 <HAL_UART_MspInit+0x9c>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <HAL_UART_MspInit+0x9c>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0308 	and.w	r3, r3, #8
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

		// Enable USARTx clock
		__HAL_RCC_USART3_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_UART_MspInit+0x9c>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]

		//##-2- Configure peripheral GPIO ##########################################
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = GPIO_PIN_8;
 80006d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006dc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80006de:	2302      	movs	r3, #2
 80006e0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006ea:	2307      	movs	r3, #7
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <HAL_UART_MspInit+0xa0>)
 80006f6:	f000 fc33 	bl	8000f60 <HAL_GPIO_Init>

		// UART RX GPIO pin configuration
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000700:	2307      	movs	r3, #7
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <HAL_UART_MspInit+0xa0>)
 800070c:	f000 fc28 	bl	8000f60 <HAL_GPIO_Init>


}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	; 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 faca 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <SystemInit+0x20>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <SystemInit+0x20>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <BLQueueInit>:
	uint8_t next; //array index of the next element to write
	uint8_t buf[BL_QUEUE_LEN];
	uint8_t len;
} BLQueue;

void BLQueueInit(BLQueue *q) {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	q->start = 0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	q->next = 0;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	705a      	strb	r2, [r3, #1]
	q->len = 0;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <BLQueueFixBounds>:

void BLQueueFixBounds(BLQueue *q) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if(q->start >= BL_QUEUE_LEN)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	d905      	bls.n	800082c <BLQueueFixBounds+0x1c>
		q->start -= BL_QUEUE_LEN;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3b64      	subs	r3, #100	; 0x64
 8000826:	b2da      	uxtb	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	701a      	strb	r2, [r3, #0]
	if(q->next >= BL_QUEUE_LEN)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	2b63      	cmp	r3, #99	; 0x63
 8000832:	d905      	bls.n	8000840 <BLQueueFixBounds+0x30>
		q->next -= BL_QUEUE_LEN;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	785b      	ldrb	r3, [r3, #1]
 8000838:	3b64      	subs	r3, #100	; 0x64
 800083a:	b2da      	uxtb	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	705a      	strb	r2, [r3, #1]
	if(q->len > BL_QUEUE_LEN)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d903      	bls.n	8000852 <BLQueueFixBounds+0x42>
		q->len = BL_QUEUE_LEN;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <BLQueueAdd>:

void BLQueueAdd(BLQueue *q, uint8_t element) {
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
	q->buf[q->next] = element;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	78fa      	ldrb	r2, [r7, #3]
 8000876:	709a      	strb	r2, [r3, #2]
	q->next++;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	785b      	ldrb	r3, [r3, #1]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	705a      	strb	r2, [r3, #1]
	q->len++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

	if(q->len == BL_QUEUE_LEN)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800089a:	2b64      	cmp	r3, #100	; 0x64
 800089c:	d105      	bne.n	80008aa <BLQueueAdd+0x4c>
		q->start++;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	701a      	strb	r2, [r3, #0]

	BLQueueFixBounds(q);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffb0 	bl	8000810 <BLQueueFixBounds>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <BLQueueAddArray>:

void BLQueueAddArray(BLQueue *q, uint8_t *inbuf, uint8_t len) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	4613      	mov	r3, r2
 80008c4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < len; i++)
 80008c6:	2300      	movs	r3, #0
 80008c8:	75fb      	strb	r3, [r7, #23]
 80008ca:	e00a      	b.n	80008e2 <BLQueueAddArray+0x2a>
		BLQueueAdd(q, inbuf[i]);
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f7ff ffc1 	bl	800085e <BLQueueAdd>
	for(uint8_t i = 0; i < len; i++)
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	3301      	adds	r3, #1
 80008e0:	75fb      	strb	r3, [r7, #23]
 80008e2:	7dfa      	ldrb	r2, [r7, #23]
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3f0      	bcc.n	80008cc <BLQueueAddArray+0x14>
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <BLQueueGetIdx>:

uint8_t BLQueueGetIdx(BLQueue *q, uint8_t idx) {
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
	uint8_t retIdx = idx + q->start;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	4413      	add	r3, r2
 8000908:	73fb      	strb	r3, [r7, #15]
	while(retIdx > BL_QUEUE_LEN)
 800090a:	e002      	b.n	8000912 <BLQueueGetIdx+0x1e>
		retIdx -= BL_QUEUE_LEN;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	3b64      	subs	r3, #100	; 0x64
 8000910:	73fb      	strb	r3, [r7, #15]
	while(retIdx > BL_QUEUE_LEN)
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	2b64      	cmp	r3, #100	; 0x64
 8000916:	d8f9      	bhi.n	800090c <BLQueueGetIdx+0x18>

	return q->buf[retIdx];
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	789b      	ldrb	r3, [r3, #2]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <BLQueueExtractMessage>:

//pulls a 10 byte command out of the buffer if one exists
	//Commands start with sopChar and end with 'E'
	//Also moves the start of the buffer to the end of the extracted command
	//returns 1 if command extracted, 0 if none found
uint8_t BLQueueExtractMessage(BLQueue *q, uint8_t *outBuf, uint8_t sopChar) {
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < q->len - 9; i++) {
 800093a:	2300      	movs	r3, #0
 800093c:	75fb      	strb	r3, [r7, #23]
 800093e:	e04b      	b.n	80009d8 <BLQueueExtractMessage+0xac>
		if(BLQueueGetIdx(q, i) == sopChar) {
 8000940:	7dfb      	ldrb	r3, [r7, #23]
 8000942:	4619      	mov	r1, r3
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	f7ff ffd5 	bl	80008f4 <BLQueueGetIdx>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4293      	cmp	r3, r2
 8000952:	d13e      	bne.n	80009d2 <BLQueueExtractMessage+0xa6>
			if(i+9 < q->len && BLQueueGetIdx(q, i+9) == 'E') {
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	3309      	adds	r3, #9
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800095e:	4293      	cmp	r3, r2
 8000960:	da37      	bge.n	80009d2 <BLQueueExtractMessage+0xa6>
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	3309      	adds	r3, #9
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f7ff ffc2 	bl	80008f4 <BLQueueGetIdx>
 8000970:	4603      	mov	r3, r0
 8000972:	2b45      	cmp	r3, #69	; 0x45
 8000974:	d12d      	bne.n	80009d2 <BLQueueExtractMessage+0xa6>
				for(uint8_t j = 0; j < 10; j++)
 8000976:	2300      	movs	r3, #0
 8000978:	75bb      	strb	r3, [r7, #22]
 800097a:	e00e      	b.n	800099a <BLQueueExtractMessage+0x6e>
					outBuf[j] = BLQueueGetIdx(q, i+j);
 800097c:	7dfa      	ldrb	r2, [r7, #23]
 800097e:	7dbb      	ldrb	r3, [r7, #22]
 8000980:	4413      	add	r3, r2
 8000982:	b2d9      	uxtb	r1, r3
 8000984:	7dbb      	ldrb	r3, [r7, #22]
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	18d4      	adds	r4, r2, r3
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f7ff ffb2 	bl	80008f4 <BLQueueGetIdx>
 8000990:	4603      	mov	r3, r0
 8000992:	7023      	strb	r3, [r4, #0]
				for(uint8_t j = 0; j < 10; j++)
 8000994:	7dbb      	ldrb	r3, [r7, #22]
 8000996:	3301      	adds	r3, #1
 8000998:	75bb      	strb	r3, [r7, #22]
 800099a:	7dbb      	ldrb	r3, [r7, #22]
 800099c:	2b09      	cmp	r3, #9
 800099e:	d9ed      	bls.n	800097c <BLQueueExtractMessage+0x50>

				q->start += i+10;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	781a      	ldrb	r2, [r3, #0]
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	4413      	add	r3, r2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	330a      	adds	r3, #10
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	701a      	strb	r2, [r3, #0]
				q->len -= (i+10);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b0a      	subs	r3, #10
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				BLQueueFixBounds(q);
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff ff21 	bl	8000810 <BLQueueFixBounds>
				return 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00a      	b.n	80009e8 <BLQueueExtractMessage+0xbc>
	for(uint8_t i = 0; i < q->len - 9; i++) {
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	3301      	adds	r3, #1
 80009d6:	75fb      	strb	r3, [r7, #23]
 80009d8:	7dfa      	ldrb	r2, [r7, #23]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80009e0:	3b09      	subs	r3, #9
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbac      	blt.n	8000940 <BLQueueExtractMessage+0x14>
			}
		}
	}
	return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	371c      	adds	r7, #28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}

080009f0 <TinyBLInit>:
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
}

UART_HandleTypeDef UartHandle; //UART handler declaration
void TinyBLInit(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
	HAL_Init();
 80009f6:	f000 f95b 	bl	8000cb0 <HAL_Init>

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	; 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fed2 	bl	80027ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <TinyBLInit+0x11c>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <TinyBLInit+0x11c>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <TinyBLInit+0x11c>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <TinyBLInit+0x120>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a34      	ldr	r2, [pc, #208]	; (8000b10 <TinyBLInit+0x120>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <TinyBLInit+0x120>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000a64:	2308      	movs	r3, #8
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000a68:	23b4      	movs	r3, #180	; 0xb4
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 ff17 	bl	80018b0 <HAL_RCC_OscConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d000      	beq.n	8000a8a <TinyBLInit+0x9a>
	{
		for(;;);
 8000a88:	e7fe      	b.n	8000a88 <TinyBLInit+0x98>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a8a:	f000 fbfd 	bl	8001288 <HAL_PWREx_EnableOverDrive>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d000      	beq.n	8000a96 <TinyBLInit+0xa6>
	{
		for(;;);
 8000a94:	e7fe      	b.n	8000a94 <TinyBLInit+0xa4>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fc37 	bl	8001328 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d000      	beq.n	8000ac2 <TinyBLInit+0xd2>
	{
		for(;;);
 8000ac0:	e7fe      	b.n	8000ac0 <TinyBLInit+0xd0>
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);*/


	UartHandle.Instance        = USART3;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <TinyBLInit+0x124>)
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <TinyBLInit+0x128>)
 8000ac6:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 57600;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <TinyBLInit+0x124>)
 8000aca:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ace:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <TinyBLInit+0x124>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <TinyBLInit+0x124>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <TinyBLInit+0x124>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <TinyBLInit+0x124>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <TinyBLInit+0x124>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <TinyBLInit+0x124>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <TinyBLInit+0x124>)
 8000af6:	f001 f979 	bl	8001dec <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d000      	beq.n	8000b02 <TinyBLInit+0x112>
	{
		//Initialization Error
		for(;;);
 8000b00:	e7fe      	b.n	8000b00 <TinyBLInit+0x110>
	}

}
 8000b02:	bf00      	nop
 8000b04:	3750      	adds	r7, #80	; 0x50
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000
 8000b14:	20000028 	.word	0x20000028
 8000b18:	40004800 	.word	0x40004800

08000b1c <TinyBLRAMLoader>:


void TinyBLRAMLoader(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a8      	sub	sp, #160	; 0xa0
 8000b20:	af02      	add	r7, sp, #8
	uint32_t msgCount;
	uint8_t cmdBuf[10];

	//init fancy circular queue
	BLQueue q;
	BLQueueInit(&q);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe5f 	bl	80007e8 <BLQueueInit>

	asm("nop");
 8000b2a:	bf00      	nop
	//wait for an init message
	//init format: "I" + message count (uint32, big endian) + start address (uint32, big endian) + 'E'
	for(;;) {
		uint16_t count;
		HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 0);
 8000b2c:	1cbb      	adds	r3, r7, #2
 8000b2e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000b32:	2200      	movs	r2, #0
 8000b34:	9200      	str	r2, [sp, #0]
 8000b36:	2211      	movs	r2, #17
 8000b38:	482b      	ldr	r0, [pc, #172]	; (8000be8 <TinyBLRAMLoader+0xcc>)
 8000b3a:	f001 fa32 	bl	8001fa2 <HAL_UARTEx_ReceiveToIdle>
		if(count) {
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f3      	beq.n	8000b2c <TinyBLRAMLoader+0x10>
			//Add to input ring buffer
			BLQueueAddArray(&q, uartInBuf, count);
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff feb2 	bl	80008b8 <BLQueueAddArray>
			//process for packets
			uint8_t isMessage = BLQueueExtractMessage(&q, cmdBuf, 'I');
 8000b54:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2249      	movs	r2, #73	; 0x49
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fee5 	bl	800092c <BLQueueExtractMessage>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			if(isMessage) {
 8000b68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0dd      	beq.n	8000b2c <TinyBLRAMLoader+0x10>
				msgCount = *((uint32_t*)(cmdBuf+1));
 8000b70:	f8d7 306d 	ldr.w	r3, [r7, #109]	; 0x6d
 8000b74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				startAddr = *((uint32_t*)(cmdBuf+5));
 8000b78:	f8d7 3071 	ldr.w	r3, [r7, #113]	; 0x71
 8000b7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

				HAL_UART_Transmit(&UartHandle, "Init Received\r\n", 15, HAL_MAX_DELAY);
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	220f      	movs	r2, #15
 8000b86:	4919      	ldr	r1, [pc, #100]	; (8000bec <TinyBLRAMLoader+0xd0>)
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <TinyBLRAMLoader+0xcc>)
 8000b8a:	f001 f97f 	bl	8001e8c <HAL_UART_Transmit>
				break;
 8000b8e:	bf00      	nop
	}

	//temp test echo back messages
	for(;;) {
		uint16_t count;
		HAL_UARTEx_ReceiveToIdle(&UartHandle, uartInBuf, 17, &count, 0);
 8000b90:	463b      	mov	r3, r7
 8000b92:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000b96:	2200      	movs	r2, #0
 8000b98:	9200      	str	r2, [sp, #0]
 8000b9a:	2211      	movs	r2, #17
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <TinyBLRAMLoader+0xcc>)
 8000b9e:	f001 fa00 	bl	8001fa2 <HAL_UARTEx_ReceiveToIdle>
		if(count) {
 8000ba2:	883b      	ldrh	r3, [r7, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f3      	beq.n	8000b90 <TinyBLRAMLoader+0x74>
			//HAL_UART_Transmit(&UartHandle, uartInBuf, count, HAL_MAX_DELAY);
			//Add to input ring buffer
			BLQueueAddArray(&q, uartInBuf, count);
 8000ba8:	883b      	ldrh	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe80 	bl	80008b8 <BLQueueAddArray>

			//process for packets
			uint8_t isMessage = BLQueueExtractMessage(&q, cmdBuf, 'S');
 8000bb8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2253      	movs	r2, #83	; 0x53
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff feb3 	bl	800092c <BLQueueExtractMessage>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			if(isMessage) {
 8000bcc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0dd      	beq.n	8000b90 <TinyBLRAMLoader+0x74>
				HAL_UART_Transmit(&UartHandle, cmdBuf, 10, HAL_MAX_DELAY);
 8000bd4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	220a      	movs	r2, #10
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TinyBLRAMLoader+0xcc>)
 8000be0:	f001 f954 	bl	8001e8c <HAL_UART_Transmit>
	for(;;) {
 8000be4:	e7d4      	b.n	8000b90 <TinyBLRAMLoader+0x74>
 8000be6:	bf00      	nop
 8000be8:	20000028 	.word	0x20000028
 8000bec:	08002850 	.word	0x08002850

08000bf0 <TinyBLStartup>:
	}
}

//Check digital pin and branches to TinyBL if set
//runs on startup
void TinyBLStartup(void) {
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

	//TODO: return when digital pin is not set
	//needs digital pin init and read code. We'll configure the pin to pull down for convenience

	TinyBLInit();
 8000bf6:	f7ff fefb 	bl	80009f0 <TinyBLInit>

	//temp UART test
	uint8_t printout[50] = "Hello from BL!\r\n";
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <TinyBLStartup+0x60>)
 8000bfc:	1d3c      	adds	r4, r7, #4
 8000bfe:	461d      	mov	r5, r3
 8000c00:	6828      	ldr	r0, [r5, #0]
 8000c02:	6869      	ldr	r1, [r5, #4]
 8000c04:	68aa      	ldr	r2, [r5, #8]
 8000c06:	68eb      	ldr	r3, [r5, #12]
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	7c2b      	ldrb	r3, [r5, #16]
 8000c0c:	7023      	strb	r3, [r4, #0]
 8000c0e:	f107 0315 	add.w	r3, r7, #21
 8000c12:	2221      	movs	r2, #33	; 0x21
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 fdc8 	bl	80027ac <memset>
	for(uint8_t i = 0; i < 1; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c22:	e00b      	b.n	8000c3c <TinyBLStartup+0x4c>
		//UART_
		HAL_UART_Transmit(&UartHandle, printout, 17, HAL_MAX_DELAY);
 8000c24:	1d39      	adds	r1, r7, #4
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2211      	movs	r2, #17
 8000c2c:	4809      	ldr	r0, [pc, #36]	; (8000c54 <TinyBLStartup+0x64>)
 8000c2e:	f001 f92d 	bl	8001e8c <HAL_UART_Transmit>
	for(uint8_t i = 0; i < 1; i++) {
 8000c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c36:	3301      	adds	r3, #1
 8000c38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0ef      	beq.n	8000c24 <TinyBLStartup+0x34>
	}

	//proceed to loader
	TinyBLRAMLoader();
 8000c44:	f7ff ff6a 	bl	8000b1c <TinyBLRAMLoader>
}
 8000c48:	bf00      	nop
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c50:	08002860 	.word	0x08002860
 8000c54:	20000028 	.word	0x20000028

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d038 	ldr.w	sp, [pc, #56]	; 8000c94 <LoopFillZerobss+0x12>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff fdb2 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f001 fd99 	bl	80027bc <__libc_init_array>
//Call TinyBL operations
  bl  TinyBLStartup
 8000c8a:	f7ff ffb1 	bl	8000bf0 <TinyBLStartup>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc37 	bl	8000500 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ca0:	0800289c 	.word	0x0800289c
  ldr r2, =_sbss
 8000ca4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca8:	20000074 	.word	0x20000074

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f90d 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fd1c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f917 	bl	8000f46 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f8ed 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000070 	.word	0x20000070

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000070 	.word	0x20000070

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff5c 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffb0 	bl	8000eb4 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e165      	b.n	8001248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8154 	bne.w	8001242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80ae 	beq.w	8001242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <HAL_GPIO_Init+0x300>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <HAL_GPIO_Init+0x300>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b5a      	ldr	r3, [pc, #360]	; (8001260 <HAL_GPIO_Init+0x300>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_GPIO_Init+0x304>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x308>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x30c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x310>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x314>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x318>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x20a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	; (800127c <HAL_GPIO_Init+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x206>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	; (8001280 <HAL_GPIO_Init+0x320>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x202>
 800115e:	2306      	movs	r3, #6
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001162:	2307      	movs	r3, #7
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	; (8001264 <HAL_GPIO_Init+0x304>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_GPIO_Init+0x324>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <HAL_GPIO_Init+0x324>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x324>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_GPIO_Init+0x324>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <HAL_GPIO_Init+0x324>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_GPIO_Init+0x324>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_GPIO_Init+0x324>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_GPIO_Init+0x324>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae96 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	; 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PWREx_EnableOverDrive+0x90>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_PWREx_EnableOverDrive+0x90>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_PWREx_EnableOverDrive+0x90>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_PWREx_EnableOverDrive+0x94>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b4:	f7ff fd62 	bl	8000d7c <HAL_GetTick>
 80012b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ba:	e009      	b.n	80012d0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012bc:	f7ff fd5e 	bl	8000d7c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ca:	d901      	bls.n	80012d0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e01f      	b.n	8001310 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_PWREx_EnableOverDrive+0x98>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d1ee      	bne.n	80012bc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff fd4a 	bl	8000d7c <HAL_GetTick>
 80012e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012ea:	e009      	b.n	8001300 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012ec:	f7ff fd46 	bl	8000d7c <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012fa:	d901      	bls.n	8001300 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e007      	b.n	8001310 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_PWREx_EnableOverDrive+0x98>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800130c:	d1ee      	bne.n	80012ec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	420e0040 	.word	0x420e0040
 8001320:	40007000 	.word	0x40007000
 8001324:	420e0044 	.word	0x420e0044

08001328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0cc      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d90c      	bls.n	8001364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b63      	ldr	r3, [pc, #396]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0b8      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800137c:	4b59      	ldr	r3, [pc, #356]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a58      	ldr	r2, [pc, #352]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800139e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a0:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	494d      	ldr	r1, [pc, #308]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d044      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e07f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e06f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e067      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4934      	ldr	r1, [pc, #208]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	4313      	orrs	r3, r2
 8001416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fcb0 	bl	8000d7c <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	e00a      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff fcac 	bl	8000d7c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e04f      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 020c 	and.w	r2, r3, #12
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1eb      	bne.n	8001420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d20c      	bcs.n	8001470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e032      	b.n	80014d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4916      	ldr	r1, [pc, #88]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ae:	f000 f855 	bl	800155c <HAL_RCC_GetSysClockFreq>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	5ccb      	ldrb	r3, [r1, r3]
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc10 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	08002874 	.word	0x08002874
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_RCC_GetHCLKFreq+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001510:	f7ff fff0 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	0a9b      	lsrs	r3, r3, #10
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4903      	ldr	r1, [pc, #12]	; (8001530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	08002884 	.word	0x08002884

08001534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001538:	f7ff ffdc 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0b5b      	lsrs	r3, r3, #13
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	08002884 	.word	0x08002884

0800155c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b0a6      	sub	sp, #152	; 0x98
 8001562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001582:	4bc8      	ldr	r3, [pc, #800]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b0c      	cmp	r3, #12
 800158c:	f200 817e 	bhi.w	800188c <HAL_RCC_GetSysClockFreq+0x330>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	080015cd 	.word	0x080015cd
 800159c:	0800188d 	.word	0x0800188d
 80015a0:	0800188d 	.word	0x0800188d
 80015a4:	0800188d 	.word	0x0800188d
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	0800188d 	.word	0x0800188d
 80015b0:	0800188d 	.word	0x0800188d
 80015b4:	0800188d 	.word	0x0800188d
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	0800188d 	.word	0x0800188d
 80015c0:	0800188d 	.word	0x0800188d
 80015c4:	0800188d 	.word	0x0800188d
 80015c8:	08001747 	.word	0x08001747
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015cc:	4bb6      	ldr	r3, [pc, #728]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80015ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80015d2:	e15f      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4bb5      	ldr	r3, [pc, #724]	; (80018ac <HAL_RCC_GetSysClockFreq+0x350>)
 80015d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80015da:	e15b      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015dc:	4bb1      	ldr	r3, [pc, #708]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e8:	4bae      	ldr	r3, [pc, #696]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d031      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f4:	4bab      	ldr	r3, [pc, #684]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	2200      	movs	r2, #0
 80015fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80015fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001606:	663b      	str	r3, [r7, #96]	; 0x60
 8001608:	2300      	movs	r3, #0
 800160a:	667b      	str	r3, [r7, #100]	; 0x64
 800160c:	4ba7      	ldr	r3, [pc, #668]	; (80018ac <HAL_RCC_GetSysClockFreq+0x350>)
 800160e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001612:	462a      	mov	r2, r5
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	2300      	movs	r3, #0
 800161a:	4621      	mov	r1, r4
 800161c:	fb01 f303 	mul.w	r3, r1, r3
 8001620:	4413      	add	r3, r2
 8001622:	4aa2      	ldr	r2, [pc, #648]	; (80018ac <HAL_RCC_GetSysClockFreq+0x350>)
 8001624:	4621      	mov	r1, r4
 8001626:	fba1 1202 	umull	r1, r2, r1, r2
 800162a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800162c:	460a      	mov	r2, r1
 800162e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001630:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001632:	4413      	add	r3, r2
 8001634:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800163a:	2200      	movs	r2, #0
 800163c:	65bb      	str	r3, [r7, #88]	; 0x58
 800163e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001644:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001648:	f7fe fddc 	bl	8000204 <__aeabi_uldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4613      	mov	r3, r2
 8001652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001656:	e064      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
 8001662:	657a      	str	r2, [r7, #84]	; 0x54
 8001664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
 800166c:	2300      	movs	r3, #0
 800166e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001670:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001674:	4622      	mov	r2, r4
 8001676:	462b      	mov	r3, r5
 8001678:	f04f 0000 	mov.w	r0, #0
 800167c:	f04f 0100 	mov.w	r1, #0
 8001680:	0159      	lsls	r1, r3, #5
 8001682:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001686:	0150      	lsls	r0, r2, #5
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4621      	mov	r1, r4
 800168e:	1a51      	subs	r1, r2, r1
 8001690:	6139      	str	r1, [r7, #16]
 8001692:	4629      	mov	r1, r5
 8001694:	eb63 0301 	sbc.w	r3, r3, r1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	f04f 0300 	mov.w	r3, #0
 80016a2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016a6:	4659      	mov	r1, fp
 80016a8:	018b      	lsls	r3, r1, #6
 80016aa:	4651      	mov	r1, sl
 80016ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b0:	4651      	mov	r1, sl
 80016b2:	018a      	lsls	r2, r1, #6
 80016b4:	4651      	mov	r1, sl
 80016b6:	ebb2 0801 	subs.w	r8, r2, r1
 80016ba:	4659      	mov	r1, fp
 80016bc:	eb63 0901 	sbc.w	r9, r3, r1
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d4:	4690      	mov	r8, r2
 80016d6:	4699      	mov	r9, r3
 80016d8:	4623      	mov	r3, r4
 80016da:	eb18 0303 	adds.w	r3, r8, r3
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	462b      	mov	r3, r5
 80016e2:	eb49 0303 	adc.w	r3, r9, r3
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016f4:	4629      	mov	r1, r5
 80016f6:	028b      	lsls	r3, r1, #10
 80016f8:	4621      	mov	r1, r4
 80016fa:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016fe:	4621      	mov	r1, r4
 8001700:	028a      	lsls	r2, r1, #10
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800170a:	2200      	movs	r2, #0
 800170c:	643b      	str	r3, [r7, #64]	; 0x40
 800170e:	647a      	str	r2, [r7, #68]	; 0x44
 8001710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001714:	f7fe fd76 	bl	8000204 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	3301      	adds	r3, #1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001734:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800173c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001744:	e0a6      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800174e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001752:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d02a      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4b51      	ldr	r3, [pc, #324]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	2200      	movs	r2, #0
 8001766:	63bb      	str	r3, [r7, #56]	; 0x38
 8001768:	63fa      	str	r2, [r7, #60]	; 0x3c
 800176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800176c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001770:	2100      	movs	r1, #0
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <HAL_RCC_GetSysClockFreq+0x350>)
 8001774:	fb03 f201 	mul.w	r2, r3, r1
 8001778:	2300      	movs	r3, #0
 800177a:	fb00 f303 	mul.w	r3, r0, r3
 800177e:	4413      	add	r3, r2
 8001780:	4a4a      	ldr	r2, [pc, #296]	; (80018ac <HAL_RCC_GetSysClockFreq+0x350>)
 8001782:	fba0 1202 	umull	r1, r2, r0, r2
 8001786:	677a      	str	r2, [r7, #116]	; 0x74
 8001788:	460a      	mov	r2, r1
 800178a:	673a      	str	r2, [r7, #112]	; 0x70
 800178c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800178e:	4413      	add	r3, r2
 8001790:	677b      	str	r3, [r7, #116]	; 0x74
 8001792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001796:	2200      	movs	r2, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
 800179a:	637a      	str	r2, [r7, #52]	; 0x34
 800179c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a4:	f7fe fd2e 	bl	8000204 <__aeabi_uldivmod>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4613      	mov	r3, r2
 80017ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017b2:	e05b      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b4:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	2200      	movs	r2, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80017be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017d0:	4642      	mov	r2, r8
 80017d2:	464b      	mov	r3, r9
 80017d4:	f04f 0000 	mov.w	r0, #0
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	0159      	lsls	r1, r3, #5
 80017de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e2:	0150      	lsls	r0, r2, #5
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4641      	mov	r1, r8
 80017ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ee:	4649      	mov	r1, r9
 80017f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001808:	ebb2 040a 	subs.w	r4, r2, sl
 800180c:	eb63 050b 	sbc.w	r5, r3, fp
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	00eb      	lsls	r3, r5, #3
 800181a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800181e:	00e2      	lsls	r2, r4, #3
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	4643      	mov	r3, r8
 8001826:	18e3      	adds	r3, r4, r3
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	464b      	mov	r3, r9
 800182c:	eb45 0303 	adc.w	r3, r5, r3
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800183e:	4629      	mov	r1, r5
 8001840:	028b      	lsls	r3, r1, #10
 8001842:	4621      	mov	r1, r4
 8001844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001848:	4621      	mov	r1, r4
 800184a:	028a      	lsls	r2, r1, #10
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001854:	2200      	movs	r2, #0
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	61fa      	str	r2, [r7, #28]
 800185a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800185e:	f7fe fcd1 	bl	8000204 <__aeabi_uldivmod>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4613      	mov	r3, r2
 8001868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x348>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0f1b      	lsrs	r3, r3, #28
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800187a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800187e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800188a:	e003      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x34c>)
 800188e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001898:	4618      	mov	r0, r3
 800189a:	3798      	adds	r7, #152	; 0x98
 800189c:	46bd      	mov	sp, r7
 800189e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	00f42400 	.word	0x00f42400
 80018ac:	017d7840 	.word	0x017d7840

080018b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e28d      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8083 	beq.w	80019d6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d0:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d019      	beq.n	8001910 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018dc:	4b91      	ldr	r3, [pc, #580]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018e8:	4b8e      	ldr	r3, [pc, #568]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f4:	d00c      	beq.n	8001910 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b8b      	ldr	r3, [pc, #556]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4b88      	ldr	r3, [pc, #544]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x124>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e25a      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x90>
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xcc>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0xb4>
 800194a:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a75      	ldr	r2, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xcc>
 8001964:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b6c      	ldr	r3, [pc, #432]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6b      	ldr	r2, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff f9fa 	bl	8000d7c <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff f9f6 	bl	8000d7c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e21f      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xdc>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff f9e6 	bl	8000d7c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff f9e2 	bl	8000d7c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e20b      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b57      	ldr	r3, [pc, #348]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x104>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d06f      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e2:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d017      	beq.n	8001a1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x186>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1d3      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4937      	ldr	r1, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f98f 	bl	8000d7c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f98b 	bl	8000d7c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1b4      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4925      	ldr	r1, [pc, #148]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0x278>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f96e 	bl	8000d7c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f96a 	bl	8000d7c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e193      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d036      	beq.n	8001b3c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d016      	beq.n	8001b04 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff f94e 	bl	8000d7c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f94a 	bl	8000d7c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e173      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x274>)
 8001af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x234>
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_OscConfig+0x27c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f937 	bl	8000d7c <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	e00e      	b.n	8001b30 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f933 	bl	8000d7c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e15c      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
 8001b24:	40023800 	.word	0x40023800
 8001b28:	42470000 	.word	0x42470000
 8001b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b8a      	ldr	r3, [pc, #552]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ea      	bne.n	8001b12 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 8097 	beq.w	8001c78 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b83      	ldr	r3, [pc, #524]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a7e      	ldr	r2, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b7c      	ldr	r3, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b76:	2301      	movs	r3, #1
 8001b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b79      	ldr	r3, [pc, #484]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b86:	4b76      	ldr	r3, [pc, #472]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a75      	ldr	r2, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f8f3 	bl	8000d7c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9a:	f7ff f8ef 	bl	8000d7c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e118      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	4b6c      	ldr	r3, [pc, #432]	; (8001d60 <HAL_RCC_OscConfig+0x4b0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x31e>
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e01c      	b.n	8001c08 <HAL_RCC_OscConfig+0x358>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x340>
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	4a60      	ldr	r2, [pc, #384]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6713      	str	r3, [r2, #112]	; 0x70
 8001be2:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5d      	ldr	r2, [pc, #372]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0x358>
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a59      	ldr	r2, [pc, #356]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d015      	beq.n	8001c3c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f8b4 	bl	8000d7c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f8b0 	bl	8000d7c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e0d7      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0ee      	beq.n	8001c18 <HAL_RCC_OscConfig+0x368>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f89e 	bl	8000d7c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7ff f89a 	bl	8000d7c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0c1      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ee      	bne.n	8001c44 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d105      	bne.n	8001c78 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	4a3a      	ldr	r2, [pc, #232]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80ad 	beq.w	8001ddc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c82:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d060      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d145      	bne.n	8001d22 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f86e 	bl	8000d7c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7ff f86a 	bl	8000d7c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e093      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	019b      	lsls	r3, r3, #6
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	061b      	lsls	r3, r3, #24
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	071b      	lsls	r3, r3, #28
 8001cee:	491b      	ldr	r1, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f83f 	bl	8000d7c <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f83b 	bl	8000d7c <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e064      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x452>
 8001d20:	e05c      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_OscConfig+0x4b4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff f828 	bl	8000d7c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f824 	bl	8000d7c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04d      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x480>
 8001d4e:	e045      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e040      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_OscConfig+0x538>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d030      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d129      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d122      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d119      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e042      	b.n	8001e84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fc32 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2224      	movs	r2, #36	; 0x24
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fa47 	bl	80022c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d175      	bne.n	8001f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_UART_Transmit+0x2c>
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e06e      	b.n	8001f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2221      	movs	r2, #33	; 0x21
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001eca:	f7fe ff57 	bl	8000d7c <HAL_GetTick>
 8001ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	88fa      	ldrh	r2, [r7, #6]
 8001ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	88fa      	ldrh	r2, [r7, #6]
 8001eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_UART_Transmit+0x6c>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d104      	bne.n	8001ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e003      	b.n	8001f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f00:	e02e      	b.n	8001f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f91c 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e03a      	b.n	8001f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e007      	b.n	8001f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1cb      	bne.n	8001f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2140      	movs	r1, #64	; 0x40
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f8e8 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e006      	b.n	8001f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3720      	adds	r7, #32
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b088      	sub	sp, #32
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 80c0 	bne.w	8002140 <HAL_UARTEx_ReceiveToIdle+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_UARTEx_ReceiveToIdle+0x2a>
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0b8      	b.n	8002142 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2222      	movs	r2, #34	; 0x22
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fea:	f7fe fec7 	bl	8000d7c <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	88fa      	ldrh	r2, [r7, #6]
 8001ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002004:	d108      	bne.n	8002018 <HAL_UARTEx_ReceiveToIdle+0x76>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d104      	bne.n	8002018 <HAL_UARTEx_ReceiveToIdle+0x76>
    {
      pdata8bits  = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	e003      	b.n	8002020 <HAL_UARTEx_ReceiveToIdle+0x7e>
    }
    else
    {
      pdata8bits  = pData;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002026:	e077      	b.n	8002118 <HAL_UARTEx_ReceiveToIdle+0x176>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b10      	cmp	r3, #16
 8002034:	d117      	bne.n	8002066 <HAL_UARTEx_ReceiveToIdle+0xc4>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_UARTEx_ReceiveToIdle+0xc4>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2202      	movs	r2, #2
 8002058:	635a      	str	r2, [r3, #52]	; 0x34
          huart->RxState = HAL_UART_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e06d      	b.n	8002142 <HAL_UARTEx_ReceiveToIdle+0x1a0>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d13c      	bne.n	80020ee <HAL_UARTEx_ReceiveToIdle+0x14c>
      {
        if (pdata8bits == NULL)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_UARTEx_ReceiveToIdle+0xf2>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	b29a      	uxth	r2, r3
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	3302      	adds	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e01f      	b.n	80020d4 <HAL_UARTEx_ReceiveToIdle+0x132>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209c:	d007      	beq.n	80020ae <HAL_UARTEx_ReceiveToIdle+0x10c>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <HAL_UARTEx_ReceiveToIdle+0x11a>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_UARTEx_ReceiveToIdle+0x11a>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e008      	b.n	80020ce <HAL_UARTEx_ReceiveToIdle+0x12c>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d010      	beq.n	8002118 <HAL_UARTEx_ReceiveToIdle+0x176>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020f6:	f7fe fe41 	bl	8000d7c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002102:	429a      	cmp	r2, r3
 8002104:	d302      	bcc.n	800210c <HAL_UARTEx_ReceiveToIdle+0x16a>
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_UARTEx_ReceiveToIdle+0x176>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e014      	b.n	8002142 <HAL_UARTEx_ReceiveToIdle+0x1a0>
    while (huart->RxXferCount > 0U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d182      	bne.n	8002028 <HAL_UARTEx_ReceiveToIdle+0x86>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800212a:	b29b      	uxth	r3, r3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <HAL_UARTEx_ReceiveToIdle+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215a:	e03b      	b.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002162:	d037      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002164:	f7fe fe0a 	bl	8000d7c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	6a3a      	ldr	r2, [r7, #32]
 8002170:	429a      	cmp	r2, r3
 8002172:	d302      	bcc.n	800217a <UART_WaitOnFlagUntilTimeout+0x30>
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e03a      	b.n	80021f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d020      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d01d      	beq.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d116      	bne.n	80021d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f81d 	bl	80021fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2208      	movs	r2, #8
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e00f      	b.n	80021f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d0b4      	beq.n	800215c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b095      	sub	sp, #84	; 0x54
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	330c      	adds	r3, #12
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	e853 3f00 	ldrex	r3, [r3]
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	330c      	adds	r3, #12
 8002222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002224:	643a      	str	r2, [r7, #64]	; 0x40
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002228:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800222a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800222c:	e841 2300 	strex	r3, r2, [r1]
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e5      	bne.n	8002204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3314      	adds	r3, #20
 800223e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	e853 3f00 	ldrex	r3, [r3]
 8002246:	61fb      	str	r3, [r7, #28]
   return(result);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3314      	adds	r3, #20
 8002256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800225e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e5      	bne.n	8002238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	2b01      	cmp	r3, #1
 8002272:	d119      	bne.n	80022a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	e853 3f00 	ldrex	r3, [r3]
 8002282:	60bb      	str	r3, [r7, #8]
   return(result);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 0310 	bic.w	r3, r3, #16
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	330c      	adds	r3, #12
 8002292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002294:	61ba      	str	r2, [r7, #24]
 8002296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002298:	6979      	ldr	r1, [r7, #20]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	e841 2300 	strex	r3, r2, [r1]
 80022a0:	613b      	str	r3, [r7, #16]
   return(result);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e5      	bne.n	8002274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80022b6:	bf00      	nop
 80022b8:	3754      	adds	r7, #84	; 0x54
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b0c0      	sub	sp, #256	; 0x100
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	68d9      	ldr	r1, [r3, #12]
 80022e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	ea40 0301 	orr.w	r3, r0, r1
 80022ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	431a      	orrs	r2, r3
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800231c:	f021 010c 	bic.w	r1, r1, #12
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800233e:	6999      	ldr	r1, [r3, #24]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	ea40 0301 	orr.w	r3, r0, r1
 800234a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b8f      	ldr	r3, [pc, #572]	; (8002590 <UART_SetConfig+0x2cc>)
 8002354:	429a      	cmp	r2, r3
 8002356:	d005      	beq.n	8002364 <UART_SetConfig+0xa0>
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b8d      	ldr	r3, [pc, #564]	; (8002594 <UART_SetConfig+0x2d0>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d104      	bne.n	800236e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002364:	f7ff f8e6 	bl	8001534 <HAL_RCC_GetPCLK2Freq>
 8002368:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800236c:	e003      	b.n	8002376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800236e:	f7ff f8cd 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 8002372:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002380:	f040 810c 	bne.w	800259c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800238e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002396:	4622      	mov	r2, r4
 8002398:	462b      	mov	r3, r5
 800239a:	1891      	adds	r1, r2, r2
 800239c:	65b9      	str	r1, [r7, #88]	; 0x58
 800239e:	415b      	adcs	r3, r3
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023a6:	4621      	mov	r1, r4
 80023a8:	eb12 0801 	adds.w	r8, r2, r1
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb43 0901 	adc.w	r9, r3, r1
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c6:	4690      	mov	r8, r2
 80023c8:	4699      	mov	r9, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	eb18 0303 	adds.w	r3, r8, r3
 80023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023d4:	462b      	mov	r3, r5
 80023d6:	eb49 0303 	adc.w	r3, r9, r3
 80023da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023f2:	460b      	mov	r3, r1
 80023f4:	18db      	adds	r3, r3, r3
 80023f6:	653b      	str	r3, [r7, #80]	; 0x50
 80023f8:	4613      	mov	r3, r2
 80023fa:	eb42 0303 	adc.w	r3, r2, r3
 80023fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002408:	f7fd fefc 	bl	8000204 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4b61      	ldr	r3, [pc, #388]	; (8002598 <UART_SetConfig+0x2d4>)
 8002412:	fba3 2302 	umull	r2, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	011c      	lsls	r4, r3, #4
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002424:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	64b9      	str	r1, [r7, #72]	; 0x48
 8002434:	415b      	adcs	r3, r3
 8002436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800243c:	4641      	mov	r1, r8
 800243e:	eb12 0a01 	adds.w	sl, r2, r1
 8002442:	4649      	mov	r1, r9
 8002444:	eb43 0b01 	adc.w	fp, r3, r1
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800245c:	4692      	mov	sl, r2
 800245e:	469b      	mov	fp, r3
 8002460:	4643      	mov	r3, r8
 8002462:	eb1a 0303 	adds.w	r3, sl, r3
 8002466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800246a:	464b      	mov	r3, r9
 800246c:	eb4b 0303 	adc.w	r3, fp, r3
 8002470:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002480:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002488:	460b      	mov	r3, r1
 800248a:	18db      	adds	r3, r3, r3
 800248c:	643b      	str	r3, [r7, #64]	; 0x40
 800248e:	4613      	mov	r3, r2
 8002490:	eb42 0303 	adc.w	r3, r2, r3
 8002494:	647b      	str	r3, [r7, #68]	; 0x44
 8002496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800249a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800249e:	f7fd feb1 	bl	8000204 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4611      	mov	r1, r2
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <UART_SetConfig+0x2d4>)
 80024aa:	fba3 2301 	umull	r2, r3, r3, r1
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2264      	movs	r2, #100	; 0x64
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	1acb      	subs	r3, r1, r3
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <UART_SetConfig+0x2d4>)
 80024c0:	fba3 2302 	umull	r2, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024cc:	441c      	add	r4, r3
 80024ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024e0:	4642      	mov	r2, r8
 80024e2:	464b      	mov	r3, r9
 80024e4:	1891      	adds	r1, r2, r2
 80024e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024e8:	415b      	adcs	r3, r3
 80024ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024f0:	4641      	mov	r1, r8
 80024f2:	1851      	adds	r1, r2, r1
 80024f4:	6339      	str	r1, [r7, #48]	; 0x30
 80024f6:	4649      	mov	r1, r9
 80024f8:	414b      	adcs	r3, r1
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002508:	4659      	mov	r1, fp
 800250a:	00cb      	lsls	r3, r1, #3
 800250c:	4651      	mov	r1, sl
 800250e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002512:	4651      	mov	r1, sl
 8002514:	00ca      	lsls	r2, r1, #3
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	4603      	mov	r3, r0
 800251c:	4642      	mov	r2, r8
 800251e:	189b      	adds	r3, r3, r2
 8002520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002524:	464b      	mov	r3, r9
 8002526:	460a      	mov	r2, r1
 8002528:	eb42 0303 	adc.w	r3, r2, r3
 800252c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800253c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002544:	460b      	mov	r3, r1
 8002546:	18db      	adds	r3, r3, r3
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
 800254a:	4613      	mov	r3, r2
 800254c:	eb42 0303 	adc.w	r3, r2, r3
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800255a:	f7fd fe53 	bl	8000204 <__aeabi_uldivmod>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <UART_SetConfig+0x2d4>)
 8002564:	fba3 1302 	umull	r1, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2164      	movs	r1, #100	; 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3332      	adds	r3, #50	; 0x32
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <UART_SetConfig+0x2d4>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 0207 	and.w	r2, r3, #7
 8002582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4422      	add	r2, r4
 800258a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800258c:	e106      	b.n	800279c <UART_SetConfig+0x4d8>
 800258e:	bf00      	nop
 8002590:	40011000 	.word	0x40011000
 8002594:	40011400 	.word	0x40011400
 8002598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800259c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025ae:	4642      	mov	r2, r8
 80025b0:	464b      	mov	r3, r9
 80025b2:	1891      	adds	r1, r2, r2
 80025b4:	6239      	str	r1, [r7, #32]
 80025b6:	415b      	adcs	r3, r3
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025be:	4641      	mov	r1, r8
 80025c0:	1854      	adds	r4, r2, r1
 80025c2:	4649      	mov	r1, r9
 80025c4:	eb43 0501 	adc.w	r5, r3, r1
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	00eb      	lsls	r3, r5, #3
 80025d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	4614      	mov	r4, r2
 80025da:	461d      	mov	r5, r3
 80025dc:	4643      	mov	r3, r8
 80025de:	18e3      	adds	r3, r4, r3
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025e4:	464b      	mov	r3, r9
 80025e6:	eb45 0303 	adc.w	r3, r5, r3
 80025ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800260a:	4629      	mov	r1, r5
 800260c:	008b      	lsls	r3, r1, #2
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002614:	4621      	mov	r1, r4
 8002616:	008a      	lsls	r2, r1, #2
 8002618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800261c:	f7fd fdf2 	bl	8000204 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4b60      	ldr	r3, [pc, #384]	; (80027a8 <UART_SetConfig+0x4e4>)
 8002626:	fba3 2302 	umull	r2, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	011c      	lsls	r4, r3, #4
 800262e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002632:	2200      	movs	r2, #0
 8002634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800263c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002640:	4642      	mov	r2, r8
 8002642:	464b      	mov	r3, r9
 8002644:	1891      	adds	r1, r2, r2
 8002646:	61b9      	str	r1, [r7, #24]
 8002648:	415b      	adcs	r3, r3
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002650:	4641      	mov	r1, r8
 8002652:	1851      	adds	r1, r2, r1
 8002654:	6139      	str	r1, [r7, #16]
 8002656:	4649      	mov	r1, r9
 8002658:	414b      	adcs	r3, r1
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002668:	4659      	mov	r1, fp
 800266a:	00cb      	lsls	r3, r1, #3
 800266c:	4651      	mov	r1, sl
 800266e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002672:	4651      	mov	r1, sl
 8002674:	00ca      	lsls	r2, r1, #3
 8002676:	4610      	mov	r0, r2
 8002678:	4619      	mov	r1, r3
 800267a:	4603      	mov	r3, r0
 800267c:	4642      	mov	r2, r8
 800267e:	189b      	adds	r3, r3, r2
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002684:	464b      	mov	r3, r9
 8002686:	460a      	mov	r2, r1
 8002688:	eb42 0303 	adc.w	r3, r2, r3
 800268c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	67bb      	str	r3, [r7, #120]	; 0x78
 800269a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026a8:	4649      	mov	r1, r9
 80026aa:	008b      	lsls	r3, r1, #2
 80026ac:	4641      	mov	r1, r8
 80026ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b2:	4641      	mov	r1, r8
 80026b4:	008a      	lsls	r2, r1, #2
 80026b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026ba:	f7fd fda3 	bl	8000204 <__aeabi_uldivmod>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4611      	mov	r1, r2
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <UART_SetConfig+0x4e4>)
 80026c6:	fba3 2301 	umull	r2, r3, r3, r1
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2264      	movs	r2, #100	; 0x64
 80026ce:	fb02 f303 	mul.w	r3, r2, r3
 80026d2:	1acb      	subs	r3, r1, r3
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	3332      	adds	r3, #50	; 0x32
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <UART_SetConfig+0x4e4>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e4:	441c      	add	r4, r3
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	673b      	str	r3, [r7, #112]	; 0x70
 80026ee:	677a      	str	r2, [r7, #116]	; 0x74
 80026f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	1891      	adds	r1, r2, r2
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	415b      	adcs	r3, r3
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002704:	4641      	mov	r1, r8
 8002706:	1851      	adds	r1, r2, r1
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	4649      	mov	r1, r9
 800270c:	414b      	adcs	r3, r1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800271c:	4659      	mov	r1, fp
 800271e:	00cb      	lsls	r3, r1, #3
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002726:	4651      	mov	r1, sl
 8002728:	00ca      	lsls	r2, r1, #3
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4603      	mov	r3, r0
 8002730:	4642      	mov	r2, r8
 8002732:	189b      	adds	r3, r3, r2
 8002734:	66bb      	str	r3, [r7, #104]	; 0x68
 8002736:	464b      	mov	r3, r9
 8002738:	460a      	mov	r2, r1
 800273a:	eb42 0303 	adc.w	r3, r2, r3
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	663b      	str	r3, [r7, #96]	; 0x60
 800274a:	667a      	str	r2, [r7, #100]	; 0x64
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002758:	4649      	mov	r1, r9
 800275a:	008b      	lsls	r3, r1, #2
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002762:	4641      	mov	r1, r8
 8002764:	008a      	lsls	r2, r1, #2
 8002766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800276a:	f7fd fd4b 	bl	8000204 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <UART_SetConfig+0x4e4>)
 8002774:	fba3 1302 	umull	r1, r3, r3, r2
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2164      	movs	r1, #100	; 0x64
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	3332      	adds	r3, #50	; 0x32
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <UART_SetConfig+0x4e4>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	f003 020f 	and.w	r2, r3, #15
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4422      	add	r2, r4
 800279a:	609a      	str	r2, [r3, #8]
}
 800279c:	bf00      	nop
 800279e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027a2:	46bd      	mov	sp, r7
 80027a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a8:	51eb851f 	.word	0x51eb851f

080027ac <memset>:
 80027ac:	4402      	add	r2, r0
 80027ae:	4603      	mov	r3, r0
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d100      	bne.n	80027b6 <memset+0xa>
 80027b4:	4770      	bx	lr
 80027b6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ba:	e7f9      	b.n	80027b0 <memset+0x4>

080027bc <__libc_init_array>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4d0d      	ldr	r5, [pc, #52]	; (80027f4 <__libc_init_array+0x38>)
 80027c0:	4c0d      	ldr	r4, [pc, #52]	; (80027f8 <__libc_init_array+0x3c>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	2600      	movs	r6, #0
 80027c8:	42a6      	cmp	r6, r4
 80027ca:	d109      	bne.n	80027e0 <__libc_init_array+0x24>
 80027cc:	4d0b      	ldr	r5, [pc, #44]	; (80027fc <__libc_init_array+0x40>)
 80027ce:	4c0c      	ldr	r4, [pc, #48]	; (8002800 <__libc_init_array+0x44>)
 80027d0:	f000 f818 	bl	8002804 <_init>
 80027d4:	1b64      	subs	r4, r4, r5
 80027d6:	10a4      	asrs	r4, r4, #2
 80027d8:	2600      	movs	r6, #0
 80027da:	42a6      	cmp	r6, r4
 80027dc:	d105      	bne.n	80027ea <__libc_init_array+0x2e>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e4:	4798      	blx	r3
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7ee      	b.n	80027c8 <__libc_init_array+0xc>
 80027ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ee:	4798      	blx	r3
 80027f0:	3601      	adds	r6, #1
 80027f2:	e7f2      	b.n	80027da <__libc_init_array+0x1e>
 80027f4:	08002894 	.word	0x08002894
 80027f8:	08002894 	.word	0x08002894
 80027fc:	08002894 	.word	0x08002894
 8002800:	08002898 	.word	0x08002898

08002804 <_init>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	bf00      	nop
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr

08002810 <_fini>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr
